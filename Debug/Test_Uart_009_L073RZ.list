
Test_Uart_009_L073RZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be4  08003be4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000078  08003c64  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003c64  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d23  00000000  00000000  0002b68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e71  00000000  00000000  0002e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c917  00000000  00000000  000445e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851f4  00000000  00000000  00050f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d60f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  000d6144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ae8 	.word	0x08003ae8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08003ae8 	.word	0x08003ae8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb74 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f828 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f93a 	bl	8000750 <MX_GPIO_Init>
  MX_RTC_Init();
 80004dc:	f000 f8a4 	bl	8000628 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f8d6 	bl	8000690 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f904 	bl	80006f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( UART_HANDLER , (uint8_t*) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 80004e8:	490a      	ldr	r1, [pc, #40]	; (8000514 <main+0x48>)
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <main+0x4c>)
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	221c      	movs	r2, #28
 80004f0:	f002 f820 	bl	8002534 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send2uart ( UART_HANDLER , gn_mostrecent_at_comm , gn_mostrecent_answer ) ;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0x50>)
 80004f6:	6819      	ldr	r1, [r3, #0]
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x54>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <main+0x4c>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 f954 	bl	80007ac <send2uart>
	  HAL_Delay ( 3000 ) ;
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <main+0x58>)
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fbc8 	bl	8000c9c <HAL_Delay>
	  HAL_PWR_EnterSTANDBYMode () ;
 800050c:	f000 fe54 	bl	80011b8 <HAL_PWR_EnterSTANDBYMode>
	  send2uart ( UART_HANDLER , gn_mostrecent_at_comm , gn_mostrecent_answer ) ;
 8000510:	e7f0      	b.n	80004f4 <main+0x28>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	08003b18 	.word	0x08003b18
 8000518:	2000013c 	.word	0x2000013c
 800051c:	20000000 	.word	0x20000000
 8000520:	20000004 	.word	0x20000004
 8000524:	00000bb8 	.word	0x00000bb8

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b09f      	sub	sp, #124	; 0x7c
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	2440      	movs	r4, #64	; 0x40
 8000530:	193b      	adds	r3, r7, r4
 8000532:	0018      	movs	r0, r3
 8000534:	2338      	movs	r3, #56	; 0x38
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f002 fe45 	bl	80031c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	232c      	movs	r3, #44	; 0x2c
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2314      	movs	r3, #20
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f002 fe3d 	bl	80031c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	0018      	movs	r0, r3
 8000552:	2328      	movs	r3, #40	; 0x28
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f002 fe36 	bl	80031c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	4b2f      	ldr	r3, [pc, #188]	; (800061c <SystemClock_Config+0xf4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2f      	ldr	r2, [pc, #188]	; (8000620 <SystemClock_Config+0xf8>)
 8000562:	401a      	ands	r2, r3
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <SystemClock_Config+0xf4>)
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	0109      	lsls	r1, r1, #4
 800056a:	430a      	orrs	r2, r1
 800056c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800056e:	f000 fe15 	bl	800119c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000572:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <SystemClock_Config+0xfc>)
 8000574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <SystemClock_Config+0xfc>)
 8000578:	4929      	ldr	r1, [pc, #164]	; (8000620 <SystemClock_Config+0xf8>)
 800057a:	400a      	ands	r2, r1
 800057c:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2214      	movs	r2, #20
 8000582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800058c:	0021      	movs	r1, r4
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2201      	movs	r2, #1
 8000592:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	22a0      	movs	r2, #160	; 0xa0
 800059e:	0212      	lsls	r2, r2, #8
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fe1a 	bl	80011e4 <HAL_RCC_OscConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005b4:	f000 f9ac 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	212c      	movs	r1, #44	; 0x2c
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	220f      	movs	r2, #15
 80005be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2100      	movs	r1, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 f9d5 	bl	800198c <HAL_RCC_ClockConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e6:	f000 f993 	bl	8000910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2223      	movs	r2, #35	; 0x23
 80005ee:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0252      	lsls	r2, r2, #9
 8000602:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	0018      	movs	r0, r3
 8000608:	f001 fbe4 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000610:	f000 f97e 	bl	8000910 <Error_Handler>
  }
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b01f      	add	sp, #124	; 0x7c
 800061a:	bd90      	pop	{r4, r7, pc}
 800061c:	40007000 	.word	0x40007000
 8000620:	ffffe7ff 	.word	0xffffe7ff
 8000624:	40021000 	.word	0x40021000

08000628 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_RTC_Init+0x60>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_RTC_Init+0x64>)
 8000630:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_RTC_Init+0x60>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_RTC_Init+0x60>)
 800063a:	227f      	movs	r2, #127	; 0x7f
 800063c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_RTC_Init+0x60>)
 8000640:	22ff      	movs	r2, #255	; 0xff
 8000642:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_RTC_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_RTC_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_RTC_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_RTC_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_RTC_Init+0x60>)
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fd2c 	bl	80020bc <HAL_RTC_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000668:	f000 f952 	bl	8000910 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_RTC_Init+0x60>)
 800066e:	2204      	movs	r2, #4
 8000670:	210a      	movs	r1, #10
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fe12 	bl	800229c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800067c:	f000 f948 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000094 	.word	0x20000094
 800068c:	40002800 	.word	0x40002800

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART1_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 800069c:	22e1      	movs	r2, #225	; 0xe1
 800069e:	0252      	lsls	r2, r2, #9
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_USART1_UART_Init+0x58>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fed9 	bl	800248c <HAL_UART_Init>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f917 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000b8 	.word	0x200000b8
 80006ec:	40013800 	.word	0x40013800

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <MX_USART2_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006fc:	22e1      	movs	r2, #225	; 0xe1
 80006fe:	0252      	lsls	r2, r2, #9
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fea9 	bl	800248c <HAL_UART_Init>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f8e7 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000013c 	.word	0x2000013c
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_GPIO_Init+0x58>)
 8000758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_GPIO_Init+0x58>)
 800075c:	2104      	movs	r1, #4
 800075e:	430a      	orrs	r2, r1
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x58>)
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	2204      	movs	r2, #4
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0x58>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_GPIO_Init+0x58>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_GPIO_Init+0x58>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x58>)
 8000788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_GPIO_Init+0x58>)
 800078c:	2101      	movs	r1, #1
 800078e:	430a      	orrs	r2, r1
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_GPIO_Init+0x58>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	2201      	movs	r2, #1
 8000798:	4013      	ands	r3, r2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000

080007ac <send2uart>:
  * @param at_command2send: an AT Command to be send to UART interface where peripheral is connected.
  * @param expected_at_answer AT Answer in polling mode expected quickly from the UART interface where peripheral is connected.
  * @param is_expected_at_answer: Boolean result of AT Answer verification.
  */
uint8_t send2uart ( UART_HandleTypeDef* huart , const char* at_command2send , const char* expected_at_answer )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t is_expected_at_answer ;
	uint8_t i ;
	char* nl_buff ;
	char* uart_rx_buff = malloc ( ( UART_RX_MAX_BUFF_SIZE + 1 ) * sizeof (char) ) ; //+1 for the null byte at the end of string
 80007b8:	2032      	movs	r0, #50	; 0x32
 80007ba:	f002 fcf1 	bl	80031a0 <malloc>
 80007be:	0003      	movs	r3, r0
 80007c0:	61bb      	str	r3, [r7, #24]
	char* uart_tx_buff = malloc ( (UART_TX_MAX_BUFF_SIZE + 1 ) * sizeof (char) ) ; //+1 for the null byte at the end of string
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f002 fcec 	bl	80031a0 <malloc>
 80007c8:	0003      	movs	r3, r0
 80007ca:	617b      	str	r3, [r7, #20]
	if ( uart_rx_buff == NULL || uart_tx_buff == NULL )
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <send2uart+0x2c>
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <send2uart+0x32>
		exit ( 1 ) ; //Out heap memory
 80007d8:	2001      	movs	r0, #1
 80007da:	f002 fca7 	bl	800312c <exit>

	for ( i = 0 ; i < 50 ; i++ ) // zamienić na zmienną
 80007de:	231e      	movs	r3, #30
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e011      	b.n	800080c <send2uart+0x60>
	{
		*(uart_rx_buff+i) = 0 ;
 80007e8:	211e      	movs	r1, #30
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	18d3      	adds	r3, r2, r3
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
		*(uart_tx_buff+i) = 0 ;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	for ( i = 0 ; i < 50 ; i++ ) // zamienić na zmienną
 8000802:	187b      	adds	r3, r7, r1
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	187b      	adds	r3, r7, r1
 8000808:	3201      	adds	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	231e      	movs	r3, #30
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b31      	cmp	r3, #49	; 0x31
 8000814:	d9e8      	bls.n	80007e8 <send2uart+0x3c>
	}

	sprintf ( uart_tx_buff , "%s" , at_command2send ) ;
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	493b      	ldr	r1, [pc, #236]	; (8000908 <send2uart+0x15c>)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	0018      	movs	r0, r3
 800081e:	f002 fdcf 	bl	80033c0 <siprintf>

	//strncpy ( uart_tx_buff , at_command2send , strlen ( at_command2send ) ) ;
	uart_status = HAL_UART_Receive ( huart , (uint8_t *) uart_rx_buff , UART_RX_MAX_BUFF_SIZE , UART_RX_TIMEOUT ) ;
 8000822:	2396      	movs	r3, #150	; 0x96
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	69b9      	ldr	r1, [r7, #24]
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	2231      	movs	r2, #49	; 0x31
 800082c:	f001 ff2a 	bl	8002684 <HAL_UART_Receive>
 8000830:	0003      	movs	r3, r0
 8000832:	001a      	movs	r2, r3
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <send2uart+0x160>)
 8000836:	701a      	strb	r2, [r3, #0]
	__HAL_UART_SEND_REQ ( huart , UART_RXDATA_FLUSH_REQUEST ) ; //https://community.st.com/s/question/0D53W00000oXKU2SAO/efficient-way-to-process-usartreceived-data-and-flush-rx-buffer-
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2108      	movs	r1, #8
 8000844:	430a      	orrs	r2, r1
 8000846:	619a      	str	r2, [r3, #24]
	uart_status = HAL_UART_Transmit ( huart , (uint8_t *) uart_tx_buff ,  strlen ( uart_tx_buff ) , UART_TX_TIMEOUT ) ;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff fc5c 	bl	8000108 <strlen>
 8000850:	0003      	movs	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	6979      	ldr	r1, [r7, #20]
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	2364      	movs	r3, #100	; 0x64
 800085a:	f001 fe6b 	bl	8002534 <HAL_UART_Transmit>
 800085e:	0003      	movs	r3, r0
 8000860:	001a      	movs	r2, r3
 8000862:	4b2a      	ldr	r3, [pc, #168]	; (800090c <send2uart+0x160>)
 8000864:	701a      	strb	r2, [r3, #0]
	*uart_rx_buff = 0 ;
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
	uart_status = HAL_UART_Receive ( huart , (uint8_t *) uart_rx_buff , UART_RX_MAX_BUFF_SIZE , UART_RX_TIMEOUT ) ;
 800086c:	2396      	movs	r3, #150	; 0x96
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	69b9      	ldr	r1, [r7, #24]
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	2231      	movs	r2, #49	; 0x31
 8000876:	f001 ff05 	bl	8002684 <HAL_UART_Receive>
 800087a:	0003      	movs	r3, r0
 800087c:	001a      	movs	r2, r3
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <send2uart+0x160>)
 8000880:	701a      	strb	r2, [r3, #0]

	//sprintf ( uart_tx_buff , "Answer %s" , uart_rx_buff ) ;
	if ( strncmp ( uart_rx_buff , expected_at_answer , strlen ( expected_at_answer ) ) == 0 )
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff fc3f 	bl	8000108 <strlen>
 800088a:	0002      	movs	r2, r0
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fdc3 	bl	800341c <strncmp>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d122      	bne.n	80008e0 <send2uart+0x134>
	{
		is_expected_at_answer = 1 ;
 800089a:	231f      	movs	r3, #31
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
		//add_null after nl to avoid problem when sending to UAR
		nl_buff = strchr ( (const char*) uart_rx_buff , nl ) ;
 80008a2:	230a      	movs	r3, #10
 80008a4:	001a      	movs	r2, r3
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f002 fda8 	bl	8003400 <strchr>
 80008b0:	0003      	movs	r3, r0
 80008b2:	613b      	str	r3, [r7, #16]
			if ( nl_buff != NULL )
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d016      	beq.n	80008e8 <send2uart+0x13c>
			{
				*nl_buff = 0 ;
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
				uart_status = HAL_UART_Transmit ( huart , (uint8_t *) uart_rx_buff ,  (uint16_t) strlen ( uart_rx_buff ) , UART_TX_TIMEOUT ) ;
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff fc20 	bl	8000108 <strlen>
 80008c8:	0003      	movs	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	69b9      	ldr	r1, [r7, #24]
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	2364      	movs	r3, #100	; 0x64
 80008d2:	f001 fe2f 	bl	8002534 <HAL_UART_Transmit>
 80008d6:	0003      	movs	r3, r0
 80008d8:	001a      	movs	r2, r3
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <send2uart+0x160>)
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e003      	b.n	80008e8 <send2uart+0x13c>
			}
	}
	else
		is_expected_at_answer = 0 ;
 80008e0:	231f      	movs	r3, #31
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	free ( uart_rx_buff ) ;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 fc62 	bl	80031b4 <free>
	free ( uart_tx_buff ) ;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	0018      	movs	r0, r3
 80008f4:	f002 fc5e 	bl	80031b4 <free>

	return is_expected_at_answer ;
 80008f8:	231f      	movs	r3, #31
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	781b      	ldrb	r3, [r3, #0]
}
 80008fe:	0018      	movs	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	b008      	add	sp, #32
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	08003b14 	.word	0x08003b14
 800090c:	200001c0 	.word	0x200001c0

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_MspInit+0x24>)
 8000922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x24>)
 8000926:	2101      	movs	r1, #1
 8000928:	430a      	orrs	r2, r1
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <HAL_MspInit+0x24>)
 800092e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_MspInit+0x24>)
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	0549      	lsls	r1, r1, #21
 8000936:	430a      	orrs	r2, r1
 8000938:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_RTC_MspInit+0x38>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d10e      	bne.n	8000974 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_RTC_MspInit+0x3c>)
 8000958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_RTC_MspInit+0x3c>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	02c9      	lsls	r1, r1, #11
 8000960:	430a      	orrs	r2, r1
 8000962:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2002      	movs	r0, #2
 800096a:	f000 fa67 	bl	8000e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800096e:	2002      	movs	r0, #2
 8000970:	f000 fa79 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40002800 	.word	0x40002800
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b08b      	sub	sp, #44	; 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	2414      	movs	r4, #20
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f002 fc16 	bl	80031c8 <memset>
  if(huart->Instance==USART1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <HAL_UART_MspInit+0xe0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12b      	bne.n	80009fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 80009a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	01c9      	lsls	r1, r1, #7
 80009b0:	430a      	orrs	r2, r1
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 80009b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b8:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	2201      	movs	r2, #1
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	22c0      	movs	r2, #192	; 0xc0
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	0021      	movs	r1, r4
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2202      	movs	r2, #2
 80009da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2203      	movs	r2, #3
 80009e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2204      	movs	r2, #4
 80009ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fa52 	bl	8000ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fc:	e02e      	b.n	8000a5c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <HAL_UART_MspInit+0xe8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d129      	bne.n	8000a5c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 8000a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	0289      	lsls	r1, r1, #10
 8000a12:	430a      	orrs	r2, r1
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 8000a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0xe4>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2e:	2114      	movs	r1, #20
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2202      	movs	r2, #2
 8000a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2203      	movs	r2, #3
 8000a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fa22 	bl	8000ea0 <HAL_GPIO_Init>
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40004400 	.word	0x40004400

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f8e6 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <RTC_IRQHandler+0x14>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 fcbe 	bl	8002428 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000094 	.word	0x20000094

08000ab8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ac2:	f002 fb2d 	bl	8003120 <__errno>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	2216      	movs	r2, #22
 8000aca:	601a      	str	r2, [r3, #0]
	return -1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	425b      	negs	r3, r3
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_exit>:

void _exit (int status)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	425a      	negs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ffe5 	bl	8000ab8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000aee:	e7fe      	b.n	8000aee <_exit+0x16>

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f002 fafe 	bl	8003120 <__errno>
 8000b24:	0003      	movs	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	425b      	negs	r3, r3
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	18d2      	adds	r2, r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <_sbrk+0x64>)
 8000b40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b006      	add	sp, #24
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20005000 	.word	0x20005000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	200001c4 	.word	0x200001c4
 8000b58:	200001e0 	.word	0x200001e0

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b92:	f7ff ffe3 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 fadf 	bl	8003158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fc97 	bl	80004cc <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
   ldr   r0, =_estack
 8000ba0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bac:	08003bec 	.word	0x08003bec
  ldr r2, =_sbss
 8000bb0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bb4:	200001dc 	.word	0x200001dc

08000bb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_COMP_IRQHandler>
	...

08000bbc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x3c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Init+0x3c>)
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f811 	bl	8000bfc <HAL_InitTick>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e001      	b.n	8000bea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be6:	f7ff fe99 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c06:	681c      	ldr	r4, [r3, #0]
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_InitTick+0x60>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	23fa      	movs	r3, #250	; 0xfa
 8000c10:	0098      	lsls	r0, r3, #2
 8000c12:	f7ff fa8b 	bl	800012c <__udivsi3>
 8000c16:	0003      	movs	r3, r0
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	f7ff fa86 	bl	800012c <__udivsi3>
 8000c20:	0003      	movs	r3, r0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f92f 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e00f      	b.n	8000c50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d80b      	bhi.n	8000c4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 f8fc 	bl	8000e3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_InitTick+0x64>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000010 	.word	0x20000010
 8000c60:	2000000c 	.word	0x2000000c

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	18d2      	adds	r2, r2, r3
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000010 	.word	0x20000010
 8000c84:	200001c8 	.word	0x200001c8

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	200001c8 	.word	0x200001c8

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	001a      	movs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	189b      	adds	r3, r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000010 	.word	0x20000010

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	0002      	movs	r2, r0
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf6:	d809      	bhi.n	8000d0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	231f      	movs	r3, #31
 8000d00:	401a      	ands	r2, r3
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_EnableIRQ+0x30>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	4091      	lsls	r1, r2
 8000d08:	000a      	movs	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
  }
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2c:	d828      	bhi.n	8000d80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2e:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	33c0      	adds	r3, #192	; 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	589b      	ldr	r3, [r3, r2]
 8000d3e:	1dfa      	adds	r2, r7, #7
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	0011      	movs	r1, r2
 8000d44:	2203      	movs	r2, #3
 8000d46:	400a      	ands	r2, r1
 8000d48:	00d2      	lsls	r2, r2, #3
 8000d4a:	21ff      	movs	r1, #255	; 0xff
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	401a      	ands	r2, r3
 8000d54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	22ff      	movs	r2, #255	; 0xff
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0018      	movs	r0, r3
 8000d64:	2303      	movs	r3, #3
 8000d66:	4003      	ands	r3, r0
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6c:	481f      	ldr	r0, [pc, #124]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7e:	e031      	b.n	8000de4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0019      	movs	r1, r3
 8000d88:	230f      	movs	r3, #15
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	3b08      	subs	r3, #8
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3306      	adds	r3, #6
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	2203      	movs	r2, #3
 8000da2:	400a      	ands	r2, r1
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	21ff      	movs	r1, #255	; 0xff
 8000da8:	4091      	lsls	r1, r2
 8000daa:	000a      	movs	r2, r1
 8000dac:	43d2      	mvns	r2, r2
 8000dae:	401a      	ands	r2, r3
 8000db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	401a      	ands	r2, r3
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	4003      	ands	r3, r0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	001c      	movs	r4, r3
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	3b08      	subs	r3, #8
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	3306      	adds	r3, #6
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18c3      	adds	r3, r0, r3
 8000de0:	3304      	adds	r3, #4
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b003      	add	sp, #12
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	045b      	lsls	r3, r3, #17
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d301      	bcc.n	8000e0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e010      	b.n	8000e2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SysTick_Config+0x44>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	3a01      	subs	r2, #1
 8000e12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e14:	2301      	movs	r3, #1
 8000e16:	425b      	negs	r3, r3
 8000e18:	2103      	movs	r1, #3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff ff7c 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x44>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x44>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	210f      	movs	r1, #15
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	1c02      	adds	r2, r0, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff33 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ffaf 	bl	8000df4 <SysTick_Config>
 8000e96:	0003      	movs	r3, r0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eb6:	e155      	b.n	8001164 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <HAL_GPIO_Init+0x30>
 8000ece:	e146      	b.n	800115e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	2201      	movs	r2, #1
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	58d3      	ldr	r3, [r2, r3]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	6939      	ldr	r1, [r7, #16]
 8000fd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	23c0      	movs	r3, #192	; 0xc0
 8001014:	029b      	lsls	r3, r3, #10
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x17c>
 800101a:	e0a0      	b.n	800115e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_GPIO_Init+0x2dc>)
 800101e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001020:	4b56      	ldr	r3, [pc, #344]	; (800117c <HAL_GPIO_Init+0x2dc>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001028:	4a55      	ldr	r2, [pc, #340]	; (8001180 <HAL_GPIO_Init+0x2e0>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	589b      	ldr	r3, [r3, r2]
 8001034:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	429a      	cmp	r2, r3
 8001054:	d01f      	beq.n	8001096 <HAL_GPIO_Init+0x1f6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4a      	ldr	r2, [pc, #296]	; (8001184 <HAL_GPIO_Init+0x2e4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x1f2>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x1ee>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_GPIO_Init+0x2ec>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x1ea>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a47      	ldr	r2, [pc, #284]	; (8001190 <HAL_GPIO_Init+0x2f0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x1e6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_GPIO_Init+0x2f4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x1e2>
 800107e:	2305      	movs	r3, #5
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x1f8>
 8001082:	2306      	movs	r3, #6
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x1f8>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x1f8>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x1f8>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x1f8>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x1f8>
 8001096:	2300      	movs	r3, #0
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	2103      	movs	r1, #3
 800109c:	400a      	ands	r2, r1
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2e0>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	4013      	ands	r3, r2
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	035b      	lsls	r3, r3, #13
 8001122:	4013      	ands	r3, r2
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	039b      	lsls	r3, r3, #14
 800114c:	4013      	ands	r3, r2
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e13      	subs	r3, r2, #0
 800116e:	d000      	beq.n	8001172 <HAL_GPIO_Init+0x2d2>
 8001170:	e6a2      	b.n	8000eb8 <HAL_GPIO_Init+0x18>
  }
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b006      	add	sp, #24
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	50000400 	.word	0x50000400
 8001188:	50000800 	.word	0x50000800
 800118c:	50000c00 	.word	0x50000c00
 8001190:	50001000 	.word	0x50001000
 8001194:	50001c00 	.word	0x50001c00
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	0049      	lsls	r1, r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40007000 	.word	0x40007000

080011b8 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_PWR_EnterSTANDBYMode+0x24>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_PWR_EnterSTANDBYMode+0x24>)
 80011c2:	2102      	movs	r1, #2
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80011ce:	2104      	movs	r1, #4
 80011d0:	430a      	orrs	r2, r1
 80011d2:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80011d4:	bf30      	wfi
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40007000 	.word	0x40007000
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f000 fbbf 	bl	8001976 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f8:	4bc9      	ldr	r3, [pc, #804]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	220c      	movs	r2, #12
 80011fe:	4013      	ands	r3, r2
 8001200:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001202:	4bc7      	ldr	r3, [pc, #796]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2201      	movs	r2, #1
 8001214:	4013      	ands	r3, r2
 8001216:	d100      	bne.n	800121a <HAL_RCC_OscConfig+0x36>
 8001218:	e07e      	b.n	8001318 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2b08      	cmp	r3, #8
 800121e:	d007      	beq.n	8001230 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b0c      	cmp	r3, #12
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x68>
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	429a      	cmp	r2, r3
 800122e:	d10d      	bne.n	800124c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	4bbb      	ldr	r3, [pc, #748]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4013      	ands	r3, r2
 800123a:	d100      	bne.n	800123e <HAL_RCC_OscConfig+0x5a>
 800123c:	e06b      	b.n	8001316 <HAL_RCC_OscConfig+0x132>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d167      	bne.n	8001316 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f000 fb95 	bl	8001976 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	429a      	cmp	r2, r3
 8001256:	d107      	bne.n	8001268 <HAL_RCC_OscConfig+0x84>
 8001258:	4bb1      	ldr	r3, [pc, #708]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4bb0      	ldr	r3, [pc, #704]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0249      	lsls	r1, r1, #9
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e027      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	23a0      	movs	r3, #160	; 0xa0
 800126e:	02db      	lsls	r3, r3, #11
 8001270:	429a      	cmp	r2, r3
 8001272:	d10e      	bne.n	8001292 <HAL_RCC_OscConfig+0xae>
 8001274:	4baa      	ldr	r3, [pc, #680]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4ba9      	ldr	r3, [pc, #676]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	02c9      	lsls	r1, r1, #11
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	4ba7      	ldr	r3, [pc, #668]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4ba6      	ldr	r3, [pc, #664]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	0249      	lsls	r1, r1, #9
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e012      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 8001292:	4ba3      	ldr	r3, [pc, #652]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4ba2      	ldr	r3, [pc, #648]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001298:	49a2      	ldr	r1, [pc, #648]	; (8001524 <HAL_RCC_OscConfig+0x340>)
 800129a:	400a      	ands	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	4ba0      	ldr	r3, [pc, #640]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4b9c      	ldr	r3, [pc, #624]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b9b      	ldr	r3, [pc, #620]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80012b2:	499d      	ldr	r1, [pc, #628]	; (8001528 <HAL_RCC_OscConfig+0x344>)
 80012b4:	400a      	ands	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d015      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fce2 	bl	8000c88 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012c8:	e009      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ca:	f7ff fcdd 	bl	8000c88 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b64      	cmp	r3, #100	; 0x64
 80012d6:	d902      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	f000 fb4c 	bl	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012de:	4b90      	ldr	r3, [pc, #576]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	4013      	ands	r3, r2
 80012e8:	d0ef      	beq.n	80012ca <HAL_RCC_OscConfig+0xe6>
 80012ea:	e015      	b.n	8001318 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fccc 	bl	8000c88 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f6:	f7ff fcc7 	bl	8000c88 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	; 0x64
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e336      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001308:	4b85      	ldr	r3, [pc, #532]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x112>
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2202      	movs	r2, #2
 800131e:	4013      	ands	r3, r2
 8001320:	d100      	bne.n	8001324 <HAL_RCC_OscConfig+0x140>
 8001322:	e099      	b.n	8001458 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	2220      	movs	r2, #32
 800132e:	4013      	ands	r3, r2
 8001330:	d009      	beq.n	8001346 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001332:	4b7b      	ldr	r3, [pc, #492]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b7a      	ldr	r3, [pc, #488]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001338:	2120      	movs	r1, #32
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	2220      	movs	r2, #32
 8001342:	4393      	bics	r3, r2
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d005      	beq.n	8001358 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d13e      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1ec>
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d13b      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001358:	4b71      	ldr	r3, [pc, #452]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2204      	movs	r2, #4
 800135e:	4013      	ands	r3, r2
 8001360:	d004      	beq.n	800136c <HAL_RCC_OscConfig+0x188>
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e304      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a6e      	ldr	r2, [pc, #440]	; (800152c <HAL_RCC_OscConfig+0x348>)
 8001372:	4013      	ands	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	021a      	lsls	r2, r3, #8
 800137c:	4b68      	ldr	r3, [pc, #416]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001382:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2209      	movs	r2, #9
 8001388:	4393      	bics	r3, r2
 800138a:	0019      	movs	r1, r3
 800138c:	4b64      	ldr	r3, [pc, #400]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800138e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001394:	f000 fc42 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001398:	0001      	movs	r1, r0
 800139a:	4b61      	ldr	r3, [pc, #388]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	220f      	movs	r2, #15
 80013a2:	4013      	ands	r3, r2
 80013a4:	4a62      	ldr	r2, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x34c>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	000a      	movs	r2, r1
 80013aa:	40da      	lsrs	r2, r3
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_RCC_OscConfig+0x350>)
 80013ae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013b0:	4b61      	ldr	r3, [pc, #388]	; (8001538 <HAL_RCC_OscConfig+0x354>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2513      	movs	r5, #19
 80013b6:	197c      	adds	r4, r7, r5
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fc1f 	bl	8000bfc <HAL_InitTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d046      	beq.n	8001458 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	e2d2      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d027      	beq.n	8001426 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013d6:	4b52      	ldr	r3, [pc, #328]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2209      	movs	r2, #9
 80013dc:	4393      	bics	r3, r2
 80013de:	0019      	movs	r1, r3
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80013e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc4e 	bl	8000c88 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc49 	bl	8000c88 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e2b8      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2204      	movs	r2, #4
 800140a:	4013      	ands	r3, r2
 800140c:	d0f1      	beq.n	80013f2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a46      	ldr	r2, [pc, #280]	; (800152c <HAL_RCC_OscConfig+0x348>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	021a      	lsls	r2, r3, #8
 800141e:	4b40      	ldr	r3, [pc, #256]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	e018      	b.n	8001458 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800142c:	2101      	movs	r1, #1
 800142e:	438a      	bics	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fc29 	bl	8000c88 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc24 	bl	8000c88 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e293      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d1f1      	bne.n	800143c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2210      	movs	r2, #16
 800145e:	4013      	ands	r3, r2
 8001460:	d100      	bne.n	8001464 <HAL_RCC_OscConfig+0x280>
 8001462:	e0a2      	b.n	80015aa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d140      	bne.n	80014ec <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x29e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e279      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a2d      	ldr	r2, [pc, #180]	; (800153c <HAL_RCC_OscConfig+0x358>)
 8001488:	4013      	ands	r3, r2
 800148a:	0019      	movs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	0a19      	lsrs	r1, r3, #8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	061a      	lsls	r2, r3, #24
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	0b5b      	lsrs	r3, r3, #13
 80014b0:	3301      	adds	r3, #1
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	0212      	lsls	r2, r2, #8
 80014b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	210f      	movs	r1, #15
 80014c0:	400b      	ands	r3, r1
 80014c2:	491b      	ldr	r1, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x34c>)
 80014c4:	5ccb      	ldrb	r3, [r1, r3]
 80014c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_RCC_OscConfig+0x350>)
 80014ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_RCC_OscConfig+0x354>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2513      	movs	r5, #19
 80014d2:	197c      	adds	r4, r7, r5
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fb91 	bl	8000bfc <HAL_InitTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014de:	197b      	adds	r3, r7, r5
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d061      	beq.n	80015aa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80014e6:	197b      	adds	r3, r7, r5
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	e244      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d040      	beq.n	8001576 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_OscConfig+0x33c>)
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	0049      	lsls	r1, r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fbc1 	bl	8000c88 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800150a:	e019      	b.n	8001540 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150c:	f7ff fbbc 	bl	8000c88 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d912      	bls.n	8001540 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e22b      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	40021000 	.word	0x40021000
 8001524:	fffeffff 	.word	0xfffeffff
 8001528:	fffbffff 	.word	0xfffbffff
 800152c:	ffffe0ff 	.word	0xffffe0ff
 8001530:	08003b38 	.word	0x08003b38
 8001534:	20000008 	.word	0x20000008
 8001538:	2000000c 	.word	0x2000000c
 800153c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001540:	4bca      	ldr	r3, [pc, #808]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d0df      	beq.n	800150c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4bc7      	ldr	r3, [pc, #796]	; (800186c <HAL_RCC_OscConfig+0x688>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4ac7      	ldr	r2, [pc, #796]	; (8001870 <HAL_RCC_OscConfig+0x68c>)
 8001552:	4013      	ands	r3, r2
 8001554:	0019      	movs	r1, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155a:	4bc4      	ldr	r3, [pc, #784]	; (800186c <HAL_RCC_OscConfig+0x688>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001560:	4bc2      	ldr	r3, [pc, #776]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	0a19      	lsrs	r1, r3, #8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	061a      	lsls	r2, r3, #24
 800156e:	4bbf      	ldr	r3, [pc, #764]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	e019      	b.n	80015aa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001576:	4bbd      	ldr	r3, [pc, #756]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4bbc      	ldr	r3, [pc, #752]	; (800186c <HAL_RCC_OscConfig+0x688>)
 800157c:	49bd      	ldr	r1, [pc, #756]	; (8001874 <HAL_RCC_OscConfig+0x690>)
 800157e:	400a      	ands	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb81 	bl	8000c88 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158c:	f7ff fb7c 	bl	8000c88 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1eb      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800159e:	4bb3      	ldr	r3, [pc, #716]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2208      	movs	r2, #8
 80015b0:	4013      	ands	r3, r2
 80015b2:	d036      	beq.n	8001622 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d019      	beq.n	80015f0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015bc:	4bab      	ldr	r3, [pc, #684]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80015be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c0:	4baa      	ldr	r3, [pc, #680]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb5e 	bl	8000c88 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb59 	bl	8000c88 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e1c8      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015e4:	4ba1      	ldr	r3, [pc, #644]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80015e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d0f1      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3ee>
 80015ee:	e018      	b.n	8001622 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b9e      	ldr	r3, [pc, #632]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80015f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f4:	4b9d      	ldr	r3, [pc, #628]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb44 	bl	8000c88 <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fb3f 	bl	8000c88 <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1ae      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001618:	4b94      	ldr	r3, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x688>)
 800161a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800161c:	2202      	movs	r2, #2
 800161e:	4013      	ands	r3, r2
 8001620:	d1f1      	bne.n	8001606 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	d100      	bne.n	800162e <HAL_RCC_OscConfig+0x44a>
 800162c:	e0ae      	b.n	800178c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2023      	movs	r0, #35	; 0x23
 8001630:	183b      	adds	r3, r7, r0
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b8d      	ldr	r3, [pc, #564]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	055b      	lsls	r3, r3, #21
 800163e:	4013      	ands	r3, r2
 8001640:	d109      	bne.n	8001656 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b8a      	ldr	r3, [pc, #552]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	0549      	lsls	r1, r1, #21
 800164c:	430a      	orrs	r2, r1
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001650:	183b      	adds	r3, r7, r0
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x694>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4013      	ands	r3, r2
 8001660:	d11a      	bne.n	8001698 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b85      	ldr	r3, [pc, #532]	; (8001878 <HAL_RCC_OscConfig+0x694>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b84      	ldr	r3, [pc, #528]	; (8001878 <HAL_RCC_OscConfig+0x694>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0049      	lsls	r1, r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001670:	f7ff fb0a 	bl	8000c88 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fb05 	bl	8000c88 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	; 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e174      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x694>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4d0>
 80016a4:	4b71      	ldr	r3, [pc, #452]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0049      	lsls	r1, r1, #1
 80016ae:	430a      	orrs	r2, r1
 80016b0:	651a      	str	r2, [r3, #80]	; 0x50
 80016b2:	e031      	b.n	8001718 <HAL_RCC_OscConfig+0x534>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4f2>
 80016bc:	4b6b      	ldr	r3, [pc, #428]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016c2:	496c      	ldr	r1, [pc, #432]	; (8001874 <HAL_RCC_OscConfig+0x690>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	651a      	str	r2, [r3, #80]	; 0x50
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016cc:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016ce:	496b      	ldr	r1, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x698>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	651a      	str	r2, [r3, #80]	; 0x50
 80016d4:	e020      	b.n	8001718 <HAL_RCC_OscConfig+0x534>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	23a0      	movs	r3, #160	; 0xa0
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	429a      	cmp	r2, r3
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x51c>
 80016e2:	4b62      	ldr	r3, [pc, #392]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	00c9      	lsls	r1, r1, #3
 80016ec:	430a      	orrs	r2, r1
 80016ee:	651a      	str	r2, [r3, #80]	; 0x50
 80016f0:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f4:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0049      	lsls	r1, r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	651a      	str	r2, [r3, #80]	; 0x50
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x534>
 8001700:	4b5a      	ldr	r3, [pc, #360]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001706:	495b      	ldr	r1, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x690>)
 8001708:	400a      	ands	r2, r1
 800170a:	651a      	str	r2, [r3, #80]	; 0x50
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x688>)
 800170e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001710:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001712:	495a      	ldr	r1, [pc, #360]	; (800187c <HAL_RCC_OscConfig+0x698>)
 8001714:	400a      	ands	r2, r1
 8001716:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fab2 	bl	8000c88 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff faad 	bl	8000c88 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_OscConfig+0x69c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e11b      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800173e:	4b4b      	ldr	r3, [pc, #300]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d0ef      	beq.n	800172a <HAL_RCC_OscConfig+0x546>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fa9c 	bl	8000c88 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001754:	e009      	b.n	800176a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fa97 	bl	8000c88 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4a47      	ldr	r2, [pc, #284]	; (8001880 <HAL_RCC_OscConfig+0x69c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e105      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_RCC_OscConfig+0x688>)
 800176c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d1ef      	bne.n	8001756 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001776:	2323      	movs	r3, #35	; 0x23
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001784:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001786:	493f      	ldr	r1, [pc, #252]	; (8001884 <HAL_RCC_OscConfig+0x6a0>)
 8001788:	400a      	ands	r2, r1
 800178a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2220      	movs	r2, #32
 8001792:	4013      	ands	r3, r2
 8001794:	d049      	beq.n	800182a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d026      	beq.n	80017ec <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80017ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_OscConfig+0x6a4>)
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <HAL_RCC_OscConfig+0x6a4>)
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0189      	lsls	r1, r1, #6
 80017c0:	430a      	orrs	r2, r1
 80017c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa60 	bl	8000c88 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ce:	f7ff fa5b 	bl	8000c88 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0ca      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d0f1      	beq.n	80017ce <HAL_RCC_OscConfig+0x5ea>
 80017ea:	e01e      	b.n	800182a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_OscConfig+0x688>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	438a      	bics	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_RCC_OscConfig+0x6a4>)
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_RCC_OscConfig+0x6a4>)
 80017fe:	4923      	ldr	r1, [pc, #140]	; (800188c <HAL_RCC_OscConfig+0x6a8>)
 8001800:	400a      	ands	r2, r1
 8001802:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fa40 	bl	8000c88 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180e:	f7ff fa3b 	bl	8000c88 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0aa      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d1f1      	bne.n	800180e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x650>
 8001832:	e09f      	b.n	8001974 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d100      	bne.n	800183c <HAL_RCC_OscConfig+0x658>
 800183a:	e078      	b.n	800192e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	2b02      	cmp	r3, #2
 8001842:	d159      	bne.n	80018f8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_OscConfig+0x688>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_RCC_OscConfig+0x688>)
 800184a:	4911      	ldr	r1, [pc, #68]	; (8001890 <HAL_RCC_OscConfig+0x6ac>)
 800184c:	400a      	ands	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fa1a 	bl	8000c88 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fa15 	bl	8000c88 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d915      	bls.n	8001894 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e084      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
 800186c:	40021000 	.word	0x40021000
 8001870:	ffff1fff 	.word	0xffff1fff
 8001874:	fffffeff 	.word	0xfffffeff
 8001878:	40007000 	.word	0x40007000
 800187c:	fffffbff 	.word	0xfffffbff
 8001880:	00001388 	.word	0x00001388
 8001884:	efffffff 	.word	0xefffffff
 8001888:	40010000 	.word	0x40010000
 800188c:	ffffdfff 	.word	0xffffdfff
 8001890:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	049b      	lsls	r3, r3, #18
 800189c:	4013      	ands	r3, r2
 800189e:	d1dc      	bne.n	800185a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a0:	4b37      	ldr	r3, [pc, #220]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a37      	ldr	r2, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x7a0>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	431a      	orrs	r2, r3
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	0449      	lsls	r1, r1, #17
 80018ca:	430a      	orrs	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f9db 	bl	8000c88 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f9d6 	bl	8000c88 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e045      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	049b      	lsls	r3, r3, #18
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x6f4>
 80018f6:	e03d      	b.n	8001974 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 80018fe:	4922      	ldr	r1, [pc, #136]	; (8001988 <HAL_RCC_OscConfig+0x7a4>)
 8001900:	400a      	ands	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff f9c0 	bl	8000c88 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f9bb 	bl	8000c88 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e02a      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	049b      	lsls	r3, r3, #18
 8001928:	4013      	ands	r3, r2
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x72a>
 800192c:	e022      	b.n	8001974 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e01d      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_RCC_OscConfig+0x79c>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	025b      	lsls	r3, r3, #9
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	429a      	cmp	r2, r3
 800194e:	d10f      	bne.n	8001970 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	23f0      	movs	r3, #240	; 0xf0
 8001954:	039b      	lsls	r3, r3, #14
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	401a      	ands	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b00a      	add	sp, #40	; 0x28
 800197c:	bdb0      	pop	{r4, r5, r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	40021000 	.word	0x40021000
 8001984:	ff02ffff 	.word	0xff02ffff
 8001988:	feffffff 	.word	0xfeffffff

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e128      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b96      	ldr	r3, [pc, #600]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d91e      	bls.n	80019ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4393      	bics	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c0:	f7ff f962 	bl	8000c88 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c8:	e009      	b.n	80019de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ca:	f7ff f95d 	bl	8000c88 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	4a8a      	ldr	r2, [pc, #552]	; (8001c00 <HAL_RCC_ClockConfig+0x274>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e109      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b87      	ldr	r3, [pc, #540]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1ee      	bne.n	80019ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2202      	movs	r2, #2
 80019f2:	4013      	ands	r3, r2
 80019f4:	d009      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f6:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	22f0      	movs	r2, #240	; 0xf0
 80019fc:	4393      	bics	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001a06:	430a      	orrs	r2, r1
 8001a08:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4013      	ands	r3, r2
 8001a12:	d100      	bne.n	8001a16 <HAL_RCC_ClockConfig+0x8a>
 8001a14:	e089      	b.n	8001b2a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a1e:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	029b      	lsls	r3, r3, #10
 8001a26:	4013      	ands	r3, r2
 8001a28:	d120      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0e1      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a36:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	049b      	lsls	r3, r3, #18
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d114      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0d5      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2204      	movs	r2, #4
 8001a54:	4013      	ands	r3, r2
 8001a56:	d109      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0ca      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0c2      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6c:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2203      	movs	r2, #3
 8001a72:	4393      	bics	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b62      	ldr	r3, [pc, #392]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f902 	bl	8000c88 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a90:	e009      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7ff f8f9 	bl	8000c88 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_RCC_ClockConfig+0x274>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0a5      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa6:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	220c      	movs	r2, #12
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d1ef      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x106>
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d111      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abc:	e009      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f8e3 	bl	8000c88 <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4a4d      	ldr	r2, [pc, #308]	; (8001c00 <HAL_RCC_ClockConfig+0x274>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e08f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d1ef      	bne.n	8001abe <HAL_RCC_ClockConfig+0x132>
 8001ade:	e024      	b.n	8001b2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d11b      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aea:	f7ff f8cd 	bl	8000c88 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a42      	ldr	r2, [pc, #264]	; (8001c00 <HAL_RCC_ClockConfig+0x274>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e079      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_ClockConfig+0x15e>
 8001b0a:	e00e      	b.n	8001b2a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff f8bc 	bl	8000c88 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_RCC_ClockConfig+0x274>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e068      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	220c      	movs	r2, #12
 8001b26:	4013      	ands	r3, r2
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d21e      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4393      	bics	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b4a:	f7ff f89d 	bl	8000c88 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	e009      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff f898 	bl	8000c88 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4a28      	ldr	r2, [pc, #160]	; (8001c00 <HAL_RCC_ClockConfig+0x274>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e044      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d1ee      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <HAL_RCC_ClockConfig+0x27c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2208      	movs	r2, #8
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <HAL_RCC_ClockConfig+0x280>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	00da      	lsls	r2, r3, #3
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb4:	f000 f832 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bb8:	0001      	movs	r1, r0
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_ClockConfig+0x278>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x284>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	000a      	movs	r2, r1
 8001bca:	40da      	lsrs	r2, r3
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_ClockConfig+0x288>)
 8001bce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_ClockConfig+0x28c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	250b      	movs	r5, #11
 8001bd6:	197c      	adds	r4, r7, r5
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff f80f 	bl	8000bfc <HAL_InitTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001be2:	197b      	adds	r3, r7, r5
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001bea:	197b      	adds	r3, r7, r5
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b004      	add	sp, #16
 8001bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	00001388 	.word	0x00001388
 8001c04:	40021000 	.word	0x40021000
 8001c08:	fffff8ff 	.word	0xfffff8ff
 8001c0c:	ffffc7ff 	.word	0xffffc7ff
 8001c10:	08003b38 	.word	0x08003b38
 8001c14:	20000008 	.word	0x20000008
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d014      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x40>
 8001c32:	d900      	bls.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c34:	e07b      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x112>
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x24>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3e:	e076      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2210      	movs	r2, #16
 8001c46:	4013      	ands	r3, r2
 8001c48:	d002      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c4e:	e07c      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c50:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x140>)
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c54:	e079      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c56:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5a:	e076      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5e:	0c9a      	lsrs	r2, r3, #18
 8001c60:	230f      	movs	r3, #15
 8001c62:	401a      	ands	r2, r3
 8001c64:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c66:	5c9b      	ldrb	r3, [r3, r2]
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	0d9a      	lsrs	r2, r3, #22
 8001c6e:	2303      	movs	r3, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	3301      	adds	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d01a      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	4a35      	ldr	r2, [pc, #212]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	69b8      	ldr	r0, [r7, #24]
 8001c90:	69f9      	ldr	r1, [r7, #28]
 8001c92:	f7fe faf7 	bl	8000284 <__aeabi_lmul>
 8001c96:	0002      	movs	r2, r0
 8001c98:	000b      	movs	r3, r1
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f7fe facb 	bl	8000244 <__aeabi_uldivmod>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	000b      	movs	r3, r1
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb6:	e037      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d01a      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	68b8      	ldr	r0, [r7, #8]
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	f7fe fad7 	bl	8000284 <__aeabi_lmul>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	000b      	movs	r3, r1
 8001cda:	0010      	movs	r0, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f7fe faab 	bl	8000244 <__aeabi_uldivmod>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	000b      	movs	r3, r1
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf6:	e017      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	0019      	movs	r1, r3
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x140>)
 8001d02:	2300      	movs	r3, #0
 8001d04:	f7fe fabe 	bl	8000284 <__aeabi_lmul>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	000b      	movs	r3, r1
 8001d0c:	0010      	movs	r0, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	001c      	movs	r4, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	001d      	movs	r5, r3
 8001d18:	0022      	movs	r2, r4
 8001d1a:	002b      	movs	r3, r5
 8001d1c:	f7fe fa92 	bl	8000244 <__aeabi_uldivmod>
 8001d20:	0002      	movs	r2, r0
 8001d22:	000b      	movs	r3, r1
 8001d24:	0013      	movs	r3, r2
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d2c:	e00d      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0b5b      	lsrs	r3, r3, #13
 8001d34:	2207      	movs	r2, #7
 8001d36:	4013      	ands	r3, r2
 8001d38:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0212      	lsls	r2, r2, #8
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d48:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b00e      	add	sp, #56	; 0x38
 8001d52:	bdb0      	pop	{r4, r5, r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	003d0900 	.word	0x003d0900
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	08003b50 	.word	0x08003b50

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b02      	ldr	r3, [pc, #8]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	20000008 	.word	0x20000008

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d80:	f7ff fff2 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d84:	0001      	movs	r1, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	4013      	ands	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	40d9      	lsrs	r1, r3
 8001d96:	000b      	movs	r3, r1
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08003b48 	.word	0x08003b48

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dac:	f7ff ffdc 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001db0:	0001      	movs	r1, r0
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	0adb      	lsrs	r3, r3, #11
 8001db8:	2207      	movs	r2, #7
 8001dba:	4013      	ands	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	40d9      	lsrs	r1, r3
 8001dc2:	000b      	movs	r3, r1
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08003b48 	.word	0x08003b48

08001dd4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2220      	movs	r2, #32
 8001dea:	4013      	ands	r3, r2
 8001dec:	d106      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	4013      	ands	r3, r2
 8001df8:	d100      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001dfa:	e0d9      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfc:	4ba4      	ldr	r3, [pc, #656]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	4013      	ands	r3, r2
 8001e06:	d10a      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4ba1      	ldr	r3, [pc, #644]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e0c:	4ba0      	ldr	r3, [pc, #640]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	0549      	lsls	r1, r1, #21
 8001e12:	430a      	orrs	r2, r1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e16:	2317      	movs	r3, #23
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b9d      	ldr	r3, [pc, #628]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4013      	ands	r3, r2
 8001e28:	d11a      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b9a      	ldr	r3, [pc, #616]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b99      	ldr	r3, [pc, #612]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0049      	lsls	r1, r1, #1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e38:	f7fe ff26 	bl	8000c88 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7fe ff21 	bl	8000c88 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e118      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b8f      	ldr	r3, [pc, #572]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e60:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	23c0      	movs	r3, #192	; 0xc0
 8001e66:	039b      	lsls	r3, r3, #14
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	23c0      	movs	r3, #192	; 0xc0
 8001e72:	039b      	lsls	r3, r3, #14
 8001e74:	4013      	ands	r3, r2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	23c0      	movs	r3, #192	; 0xc0
 8001e82:	039b      	lsls	r3, r3, #14
 8001e84:	4013      	ands	r3, r2
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	23c0      	movs	r3, #192	; 0xc0
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	401a      	ands	r2, r3
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e9e:	4b7c      	ldr	r3, [pc, #496]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0e8      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001eb4:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d049      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	23c0      	movs	r3, #192	; 0xc0
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	4013      	ands	r3, r2
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d004      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2220      	movs	r2, #32
 8001edc:	4013      	ands	r3, r2
 8001ede:	d10d      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	23c0      	movs	r3, #192	; 0xc0
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d034      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d02e      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001efc:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f00:	4a65      	ldr	r2, [pc, #404]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f06:	4b62      	ldr	r3, [pc, #392]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0a:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	0309      	lsls	r1, r1, #12
 8001f10:	430a      	orrs	r2, r1
 8001f12:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f18:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f1a:	4960      	ldr	r1, [pc, #384]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f20:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d014      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe feaa 	bl	8000c88 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f38:	e009      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe fea5 	bl	8000c88 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a56      	ldr	r2, [pc, #344]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e09b      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f4e:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d0ef      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	23c0      	movs	r3, #192	; 0xc0
 8001f60:	029b      	lsls	r3, r3, #10
 8001f62:	401a      	ands	r2, r3
 8001f64:	23c0      	movs	r3, #192	; 0xc0
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	039b      	lsls	r3, r3, #14
 8001f7e:	401a      	ands	r2, r3
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	401a      	ands	r2, r3
 8001f94:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f9a:	2317      	movs	r3, #23
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001faa:	493f      	ldr	r1, [pc, #252]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fba:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	4393      	bics	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	220c      	movs	r2, #12
 8001fde:	4393      	bics	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002006:	430a      	orrs	r2, r1
 8002008:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2208      	movs	r2, #8
 8002010:	4013      	ands	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002024:	430a      	orrs	r2, r1
 8002026:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002044:	430a      	orrs	r2, r1
 8002046:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	4013      	ands	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002062:	430a      	orrs	r2, r1
 8002064:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	4013      	ands	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002080:	430a      	orrs	r2, r1
 8002082:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	fffcffff 	.word	0xfffcffff
 800209c:	fff7ffff 	.word	0xfff7ffff
 80020a0:	00001388 	.word	0x00001388
 80020a4:	ffcfffff 	.word	0xffcfffff
 80020a8:	efffffff 	.word	0xefffffff
 80020ac:	fffff3ff 	.word	0xfffff3ff
 80020b0:	ffffcfff 	.word	0xffffcfff
 80020b4:	fbffffff 	.word	0xfbffffff
 80020b8:	fff3ffff 	.word	0xfff3ffff

080020bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e08e      	b.n	80021ec <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2221      	movs	r2, #33	; 0x21
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	2100      	movs	r1, #0
 80020e0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7fe fc2d 	bl	8000944 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2221      	movs	r2, #33	; 0x21
 80020ee:	2102      	movs	r1, #2
 80020f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	22ca      	movs	r2, #202	; 0xca
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2253      	movs	r2, #83	; 0x53
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f89e 	bl	8002246 <RTC_EnterInitMode>
 800210a:	1e03      	subs	r3, r0, #0
 800210c:	d009      	beq.n	8002122 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	22ff      	movs	r2, #255	; 0xff
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2221      	movs	r2, #33	; 0x21
 800211a:	2104      	movs	r1, #4
 800211c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e064      	b.n	80021ec <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4931      	ldr	r1, [pc, #196]	; (80021f4 <HAL_RTC_Init+0x138>)
 800212e:	400a      	ands	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68d2      	ldr	r2, [r2, #12]
 8002158:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6919      	ldr	r1, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2180      	movs	r1, #128	; 0x80
 800217a:	438a      	bics	r2, r1
 800217c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2103      	movs	r1, #3
 800218a:	438a      	bics	r2, r1
 800218c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2220      	movs	r2, #32
 80021ae:	4013      	ands	r3, r2
 80021b0:	d113      	bne.n	80021da <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f81f 	bl	80021f8 <HAL_RTC_WaitForSynchro>
 80021ba:	1e03      	subs	r3, r0, #0
 80021bc:	d00d      	beq.n	80021da <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2221      	movs	r2, #33	; 0x21
 80021ca:	2104      	movs	r1, #4
 80021cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	2100      	movs	r1, #0
 80021d4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e008      	b.n	80021ec <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2221      	movs	r2, #33	; 0x21
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
  }
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	ff8fffbf 	.word	0xff8fffbf

080021f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	21a0      	movs	r1, #160	; 0xa0
 800220c:	438a      	bics	r2, r1
 800220e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002210:	f7fe fd3a 	bl	8000c88 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002218:	e00a      	b.n	8002230 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800221a:	f7fe fd35 	bl	8000c88 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad2      	subs	r2, r2, r3
 8002224:	23fa      	movs	r3, #250	; 0xfa
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d901      	bls.n	8002230 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e006      	b.n	800223e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	4013      	ands	r3, r2
 800223a:	d0ee      	beq.n	800221a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}

08002246 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	4013      	ands	r3, r2
 8002258:	d11a      	bne.n	8002290 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	4252      	negs	r2, r2
 8002262:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002264:	f7fe fd10 	bl	8000c88 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800226c:	e00a      	b.n	8002284 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800226e:	f7fe fd0b 	bl	8000c88 <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	23fa      	movs	r3, #250	; 0xfa
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d901      	bls.n	8002284 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e006      	b.n	8002292 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	4013      	ands	r3, r2
 800228e:	d0ee      	beq.n	800226e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	b004      	add	sp, #16
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0ad      	b.n	8002412 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	; 0x21
 80022c2:	2102      	movs	r1, #2
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	22ca      	movs	r2, #202	; 0xca
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2253      	movs	r2, #83	; 0x53
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	d021      	beq.n	8002328 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 80022e4:	f7fe fcd0 	bl	8000c88 <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80022ec:	e016      	b.n	800231c <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022ee:	f7fe fccb 	bl	8000c88 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	23fa      	movs	r3, #250	; 0xfa
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d90d      	bls.n	800231c <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2221      	movs	r2, #33	; 0x21
 800230c:	2103      	movs	r1, #3
 800230e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e07a      	b.n	8002412 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d1e2      	bne.n	80022ee <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	493a      	ldr	r1, [pc, #232]	; (800241c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002334:	400a      	ands	r2, r1
 8002336:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	22ff      	movs	r2, #255	; 0xff
 8002340:	401a      	ands	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4936      	ldr	r1, [pc, #216]	; (8002420 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8002348:	430a      	orrs	r2, r1
 800234a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800234c:	f7fe fc9c 	bl	8000c88 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002354:	e016      	b.n	8002384 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002356:	f7fe fc97 	bl	8000c88 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad2      	subs	r2, r2, r3
 8002360:	23fa      	movs	r3, #250	; 0xfa
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d90d      	bls.n	8002384 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	; 0x21
 8002374:	2103      	movs	r1, #3
 8002376:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e046      	b.n	8002412 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
 800238e:	d0e2      	beq.n	8002356 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2107      	movs	r1, #7
 80023a4:	438a      	bics	r2, r1
 80023a6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6899      	ldr	r1, [r3, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	0349      	lsls	r1, r1, #13
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0349      	lsls	r1, r1, #13
 80023d0:	430a      	orrs	r2, r1
 80023d2:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	01c9      	lsls	r1, r1, #7
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	00c9      	lsls	r1, r1, #3
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	22ff      	movs	r2, #255	; 0xff
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2221      	movs	r2, #33	; 0x21
 8002404:	2101      	movs	r1, #1
 8002406:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	fffffbff 	.word	0xfffffbff
 8002420:	fffffb7f 	.word	0xfffffb7f
 8002424:	40010400 	.word	0x40010400

08002428 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4013      	ands	r3, r2
 800243c:	d00d      	beq.n	800245a <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f81b 	bl	800247c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	401a      	ands	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8002456:	430a      	orrs	r2, r1
 8002458:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	0352      	lsls	r2, r2, #13
 8002460:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2221      	movs	r2, #33	; 0x21
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	fffffb7f 	.word	0xfffffb7f
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e044      	b.n	8002528 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2274      	movs	r2, #116	; 0x74
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe fa67 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	; 0x24
 80024ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f9c6 	bl	8002860 <UART_SetConfig>
 80024d4:	0003      	movs	r3, r0
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e024      	b.n	8002528 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 fc59 	bl	8002da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	490d      	ldr	r1, [pc, #52]	; (8002530 <HAL_UART_Init+0xa4>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	212a      	movs	r1, #42	; 0x2a
 800250a:	438a      	bics	r2, r1
 800250c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fcf1 	bl	8002f08 <UART_CheckIdleState>
 8002526:	0003      	movs	r3, r0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	ffffb7ff 	.word	0xffffb7ff

08002534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002548:	2b20      	cmp	r3, #32
 800254a:	d000      	beq.n	800254e <HAL_UART_Transmit+0x1a>
 800254c:	e095      	b.n	800267a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_UART_Transmit+0x28>
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e08d      	b.n	800267c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	429a      	cmp	r2, r3
 800256a:	d109      	bne.n	8002580 <HAL_UART_Transmit+0x4c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2201      	movs	r2, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e07d      	b.n	800267c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2274      	movs	r2, #116	; 0x74
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_UART_Transmit+0x5a>
 800258a:	2302      	movs	r3, #2
 800258c:	e076      	b.n	800267c <HAL_UART_Transmit+0x148>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2274      	movs	r2, #116	; 0x74
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	2100      	movs	r1, #0
 800259c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2221      	movs	r2, #33	; 0x21
 80025a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fb70 	bl	8000c88 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1dba      	adds	r2, r7, #6
 80025b0:	2150      	movs	r1, #80	; 0x50
 80025b2:	8812      	ldrh	r2, [r2, #0]
 80025b4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1dba      	adds	r2, r7, #6
 80025ba:	2152      	movs	r1, #82	; 0x52
 80025bc:	8812      	ldrh	r2, [r2, #0]
 80025be:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	015b      	lsls	r3, r3, #5
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d108      	bne.n	80025de <HAL_UART_Transmit+0xaa>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e003      	b.n	80025e6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2274      	movs	r2, #116	; 0x74
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80025ee:	e02c      	b.n	800264a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	0013      	movs	r3, r2
 80025fa:	2200      	movs	r2, #0
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	f000 fccb 	bl	8002f98 <UART_WaitOnFlagUntilTimeout>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d001      	beq.n	800260a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e038      	b.n	800267c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	001a      	movs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	05d2      	lsls	r2, r2, #23
 800261c:	0dd2      	lsrs	r2, r2, #23
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	3302      	adds	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	e007      	b.n	8002638 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2252      	movs	r2, #82	; 0x52
 800263c:	5a9b      	ldrh	r3, [r3, r2]
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b299      	uxth	r1, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2252      	movs	r2, #82	; 0x52
 8002648:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2252      	movs	r2, #82	; 0x52
 800264e:	5a9b      	ldrh	r3, [r3, r2]
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1cc      	bne.n	80025f0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	0013      	movs	r3, r2
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	f000 fc98 	bl	8002f98 <UART_WaitOnFlagUntilTimeout>
 8002668:	1e03      	subs	r3, r0, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e005      	b.n	800267c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
  }
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b008      	add	sp, #32
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	1dbb      	adds	r3, r7, #6
 8002692:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002698:	2b20      	cmp	r3, #32
 800269a:	d000      	beq.n	800269e <HAL_UART_Receive+0x1a>
 800269c:	e0d9      	b.n	8002852 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_UART_Receive+0x28>
 80026a4:	1dbb      	adds	r3, r7, #6
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0d1      	b.n	8002854 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	015b      	lsls	r3, r3, #5
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d109      	bne.n	80026d0 <HAL_UART_Receive+0x4c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	d001      	beq.n	80026d0 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0c1      	b.n	8002854 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2274      	movs	r2, #116	; 0x74
 80026d4:	5c9b      	ldrb	r3, [r3, r2]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_UART_Receive+0x5a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e0ba      	b.n	8002854 <HAL_UART_Receive+0x1d0>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2274      	movs	r2, #116	; 0x74
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	2100      	movs	r1, #0
 80026ec:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2222      	movs	r2, #34	; 0x22
 80026f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026fa:	f7fe fac5 	bl	8000c88 <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1dba      	adds	r2, r7, #6
 8002706:	2158      	movs	r1, #88	; 0x58
 8002708:	8812      	ldrh	r2, [r2, #0]
 800270a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1dba      	adds	r2, r7, #6
 8002710:	215a      	movs	r1, #90	; 0x5a
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	015b      	lsls	r3, r3, #5
 800271e:	429a      	cmp	r2, r3
 8002720:	d10d      	bne.n	800273e <HAL_UART_Receive+0xba>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_UART_Receive+0xb0>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	225c      	movs	r2, #92	; 0x5c
 800272e:	494b      	ldr	r1, [pc, #300]	; (800285c <HAL_UART_Receive+0x1d8>)
 8002730:	5299      	strh	r1, [r3, r2]
 8002732:	e02e      	b.n	8002792 <HAL_UART_Receive+0x10e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	225c      	movs	r2, #92	; 0x5c
 8002738:	21ff      	movs	r1, #255	; 0xff
 800273a:	5299      	strh	r1, [r3, r2]
 800273c:	e029      	b.n	8002792 <HAL_UART_Receive+0x10e>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <HAL_UART_Receive+0xde>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <HAL_UART_Receive+0xd4>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	225c      	movs	r2, #92	; 0x5c
 8002752:	21ff      	movs	r1, #255	; 0xff
 8002754:	5299      	strh	r1, [r3, r2]
 8002756:	e01c      	b.n	8002792 <HAL_UART_Receive+0x10e>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	225c      	movs	r2, #92	; 0x5c
 800275c:	217f      	movs	r1, #127	; 0x7f
 800275e:	5299      	strh	r1, [r3, r2]
 8002760:	e017      	b.n	8002792 <HAL_UART_Receive+0x10e>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	429a      	cmp	r2, r3
 800276c:	d10d      	bne.n	800278a <HAL_UART_Receive+0x106>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d104      	bne.n	8002780 <HAL_UART_Receive+0xfc>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	225c      	movs	r2, #92	; 0x5c
 800277a:	217f      	movs	r1, #127	; 0x7f
 800277c:	5299      	strh	r1, [r3, r2]
 800277e:	e008      	b.n	8002792 <HAL_UART_Receive+0x10e>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	225c      	movs	r2, #92	; 0x5c
 8002784:	213f      	movs	r1, #63	; 0x3f
 8002786:	5299      	strh	r1, [r3, r2]
 8002788:	e003      	b.n	8002792 <HAL_UART_Receive+0x10e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	225c      	movs	r2, #92	; 0x5c
 800278e:	2100      	movs	r1, #0
 8002790:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002792:	2312      	movs	r3, #18
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	215c      	movs	r1, #92	; 0x5c
 800279a:	5a52      	ldrh	r2, [r2, r1]
 800279c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	015b      	lsls	r3, r3, #5
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d108      	bne.n	80027bc <HAL_UART_Receive+0x138>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e003      	b.n	80027c4 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2274      	movs	r2, #116	; 0x74
 80027c8:	2100      	movs	r1, #0
 80027ca:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027cc:	e036      	b.n	800283c <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	0013      	movs	r3, r2
 80027d8:	2200      	movs	r2, #0
 80027da:	2120      	movs	r1, #32
 80027dc:	f000 fbdc 	bl	8002f98 <UART_WaitOnFlagUntilTimeout>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e035      	b.n	8002854 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10e      	bne.n	800280c <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2212      	movs	r2, #18
 80027f8:	18ba      	adds	r2, r7, r2
 80027fa:	8812      	ldrh	r2, [r2, #0]
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29a      	uxth	r2, r3
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	3302      	adds	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e00e      	b.n	800282a <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2212      	movs	r2, #18
 8002816:	18ba      	adds	r2, r7, r2
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	4013      	ands	r3, r2
 800281e:	b2da      	uxtb	r2, r3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	225a      	movs	r2, #90	; 0x5a
 800282e:	5a9b      	ldrh	r3, [r3, r2]
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b299      	uxth	r1, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	225a      	movs	r2, #90	; 0x5a
 800283a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	225a      	movs	r2, #90	; 0x5a
 8002840:	5a9b      	ldrh	r3, [r3, r2]
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1c2      	bne.n	80027ce <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
  }
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b008      	add	sp, #32
 800285a:	bd80      	pop	{r7, pc}
 800285c:	000001ff 	.word	0x000001ff

08002860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b08e      	sub	sp, #56	; 0x38
 8002864:	af00      	add	r7, sp, #0
 8002866:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002868:	231a      	movs	r3, #26
 800286a:	2218      	movs	r2, #24
 800286c:	189b      	adds	r3, r3, r2
 800286e:	19db      	adds	r3, r3, r7
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	431a      	orrs	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4313      	orrs	r3, r2
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4ac3      	ldr	r2, [pc, #780]	; (8002ba0 <UART_SetConfig+0x340>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4abe      	ldr	r2, [pc, #760]	; (8002ba4 <UART_SetConfig+0x344>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4ab8      	ldr	r2, [pc, #736]	; (8002ba8 <UART_SetConfig+0x348>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d0:	4313      	orrs	r3, r2
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4ab4      	ldr	r2, [pc, #720]	; (8002bac <UART_SetConfig+0x34c>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4ab0      	ldr	r2, [pc, #704]	; (8002bb0 <UART_SetConfig+0x350>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d131      	bne.n	8002958 <UART_SetConfig+0xf8>
 80028f4:	4baf      	ldr	r3, [pc, #700]	; (8002bb4 <UART_SetConfig+0x354>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	2203      	movs	r2, #3
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d01d      	beq.n	800293c <UART_SetConfig+0xdc>
 8002900:	d823      	bhi.n	800294a <UART_SetConfig+0xea>
 8002902:	2b02      	cmp	r3, #2
 8002904:	d00c      	beq.n	8002920 <UART_SetConfig+0xc0>
 8002906:	d820      	bhi.n	800294a <UART_SetConfig+0xea>
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <UART_SetConfig+0xb2>
 800290c:	2b01      	cmp	r3, #1
 800290e:	d00e      	beq.n	800292e <UART_SetConfig+0xce>
 8002910:	e01b      	b.n	800294a <UART_SetConfig+0xea>
 8002912:	231b      	movs	r3, #27
 8002914:	2218      	movs	r2, #24
 8002916:	189b      	adds	r3, r3, r2
 8002918:	19db      	adds	r3, r3, r7
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e0b4      	b.n	8002a8a <UART_SetConfig+0x22a>
 8002920:	231b      	movs	r3, #27
 8002922:	2218      	movs	r2, #24
 8002924:	189b      	adds	r3, r3, r2
 8002926:	19db      	adds	r3, r3, r7
 8002928:	2202      	movs	r2, #2
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e0ad      	b.n	8002a8a <UART_SetConfig+0x22a>
 800292e:	231b      	movs	r3, #27
 8002930:	2218      	movs	r2, #24
 8002932:	189b      	adds	r3, r3, r2
 8002934:	19db      	adds	r3, r3, r7
 8002936:	2204      	movs	r2, #4
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e0a6      	b.n	8002a8a <UART_SetConfig+0x22a>
 800293c:	231b      	movs	r3, #27
 800293e:	2218      	movs	r2, #24
 8002940:	189b      	adds	r3, r3, r2
 8002942:	19db      	adds	r3, r3, r7
 8002944:	2208      	movs	r2, #8
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e09f      	b.n	8002a8a <UART_SetConfig+0x22a>
 800294a:	231b      	movs	r3, #27
 800294c:	2218      	movs	r2, #24
 800294e:	189b      	adds	r3, r3, r2
 8002950:	19db      	adds	r3, r3, r7
 8002952:	2210      	movs	r2, #16
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e098      	b.n	8002a8a <UART_SetConfig+0x22a>
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a96      	ldr	r2, [pc, #600]	; (8002bb8 <UART_SetConfig+0x358>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d131      	bne.n	80029c6 <UART_SetConfig+0x166>
 8002962:	4b94      	ldr	r3, [pc, #592]	; (8002bb4 <UART_SetConfig+0x354>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	220c      	movs	r2, #12
 8002968:	4013      	ands	r3, r2
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d01d      	beq.n	80029aa <UART_SetConfig+0x14a>
 800296e:	d823      	bhi.n	80029b8 <UART_SetConfig+0x158>
 8002970:	2b08      	cmp	r3, #8
 8002972:	d00c      	beq.n	800298e <UART_SetConfig+0x12e>
 8002974:	d820      	bhi.n	80029b8 <UART_SetConfig+0x158>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <UART_SetConfig+0x120>
 800297a:	2b04      	cmp	r3, #4
 800297c:	d00e      	beq.n	800299c <UART_SetConfig+0x13c>
 800297e:	e01b      	b.n	80029b8 <UART_SetConfig+0x158>
 8002980:	231b      	movs	r3, #27
 8002982:	2218      	movs	r2, #24
 8002984:	189b      	adds	r3, r3, r2
 8002986:	19db      	adds	r3, r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e07d      	b.n	8002a8a <UART_SetConfig+0x22a>
 800298e:	231b      	movs	r3, #27
 8002990:	2218      	movs	r2, #24
 8002992:	189b      	adds	r3, r3, r2
 8002994:	19db      	adds	r3, r3, r7
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e076      	b.n	8002a8a <UART_SetConfig+0x22a>
 800299c:	231b      	movs	r3, #27
 800299e:	2218      	movs	r2, #24
 80029a0:	189b      	adds	r3, r3, r2
 80029a2:	19db      	adds	r3, r3, r7
 80029a4:	2204      	movs	r2, #4
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e06f      	b.n	8002a8a <UART_SetConfig+0x22a>
 80029aa:	231b      	movs	r3, #27
 80029ac:	2218      	movs	r2, #24
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	19db      	adds	r3, r3, r7
 80029b2:	2208      	movs	r2, #8
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e068      	b.n	8002a8a <UART_SetConfig+0x22a>
 80029b8:	231b      	movs	r3, #27
 80029ba:	2218      	movs	r2, #24
 80029bc:	189b      	adds	r3, r3, r2
 80029be:	19db      	adds	r3, r3, r7
 80029c0:	2210      	movs	r2, #16
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e061      	b.n	8002a8a <UART_SetConfig+0x22a>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7c      	ldr	r2, [pc, #496]	; (8002bbc <UART_SetConfig+0x35c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d106      	bne.n	80029de <UART_SetConfig+0x17e>
 80029d0:	231b      	movs	r3, #27
 80029d2:	2218      	movs	r2, #24
 80029d4:	189b      	adds	r3, r3, r2
 80029d6:	19db      	adds	r3, r3, r7
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e055      	b.n	8002a8a <UART_SetConfig+0x22a>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <UART_SetConfig+0x360>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d106      	bne.n	80029f6 <UART_SetConfig+0x196>
 80029e8:	231b      	movs	r3, #27
 80029ea:	2218      	movs	r2, #24
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	19db      	adds	r3, r3, r7
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e049      	b.n	8002a8a <UART_SetConfig+0x22a>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6b      	ldr	r2, [pc, #428]	; (8002ba8 <UART_SetConfig+0x348>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d13e      	bne.n	8002a7e <UART_SetConfig+0x21e>
 8002a00:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <UART_SetConfig+0x354>)
 8002a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a04:	23c0      	movs	r3, #192	; 0xc0
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	22c0      	movs	r2, #192	; 0xc0
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d027      	beq.n	8002a62 <UART_SetConfig+0x202>
 8002a12:	22c0      	movs	r2, #192	; 0xc0
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d82a      	bhi.n	8002a70 <UART_SetConfig+0x210>
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d011      	beq.n	8002a46 <UART_SetConfig+0x1e6>
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d822      	bhi.n	8002a70 <UART_SetConfig+0x210>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <UART_SetConfig+0x1d8>
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	00d2      	lsls	r2, r2, #3
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <UART_SetConfig+0x1f4>
 8002a36:	e01b      	b.n	8002a70 <UART_SetConfig+0x210>
 8002a38:	231b      	movs	r3, #27
 8002a3a:	2218      	movs	r2, #24
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	19db      	adds	r3, r3, r7
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e021      	b.n	8002a8a <UART_SetConfig+0x22a>
 8002a46:	231b      	movs	r3, #27
 8002a48:	2218      	movs	r2, #24
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e01a      	b.n	8002a8a <UART_SetConfig+0x22a>
 8002a54:	231b      	movs	r3, #27
 8002a56:	2218      	movs	r2, #24
 8002a58:	189b      	adds	r3, r3, r2
 8002a5a:	19db      	adds	r3, r3, r7
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e013      	b.n	8002a8a <UART_SetConfig+0x22a>
 8002a62:	231b      	movs	r3, #27
 8002a64:	2218      	movs	r2, #24
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	19db      	adds	r3, r3, r7
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e00c      	b.n	8002a8a <UART_SetConfig+0x22a>
 8002a70:	231b      	movs	r3, #27
 8002a72:	2218      	movs	r2, #24
 8002a74:	189b      	adds	r3, r3, r2
 8002a76:	19db      	adds	r3, r3, r7
 8002a78:	2210      	movs	r2, #16
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <UART_SetConfig+0x22a>
 8002a7e:	231b      	movs	r3, #27
 8002a80:	2218      	movs	r2, #24
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	19db      	adds	r3, r3, r7
 8002a86:	2210      	movs	r2, #16
 8002a88:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a46      	ldr	r2, [pc, #280]	; (8002ba8 <UART_SetConfig+0x348>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d000      	beq.n	8002a96 <UART_SetConfig+0x236>
 8002a94:	e09a      	b.n	8002bcc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a96:	231b      	movs	r3, #27
 8002a98:	2218      	movs	r2, #24
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	19db      	adds	r3, r3, r7
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d01d      	beq.n	8002ae0 <UART_SetConfig+0x280>
 8002aa4:	dc20      	bgt.n	8002ae8 <UART_SetConfig+0x288>
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d015      	beq.n	8002ad6 <UART_SetConfig+0x276>
 8002aaa:	dc1d      	bgt.n	8002ae8 <UART_SetConfig+0x288>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <UART_SetConfig+0x256>
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d005      	beq.n	8002ac0 <UART_SetConfig+0x260>
 8002ab4:	e018      	b.n	8002ae8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab6:	f7ff f961 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8002aba:	0003      	movs	r3, r0
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002abe:	e01c      	b.n	8002afa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac0:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <UART_SetConfig+0x354>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d002      	beq.n	8002ad0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002aca:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <UART_SetConfig+0x364>)
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ace:	e014      	b.n	8002afa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <UART_SetConfig+0x368>)
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad4:	e011      	b.n	8002afa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad6:	f7ff f8a1 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002ada:	0003      	movs	r3, r0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ade:	e00c      	b.n	8002afa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ae6:	e008      	b.n	8002afa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002aec:	231a      	movs	r3, #26
 8002aee:	2218      	movs	r2, #24
 8002af0:	189b      	adds	r3, r3, r2
 8002af2:	19db      	adds	r3, r3, r7
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
        break;
 8002af8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d100      	bne.n	8002b02 <UART_SetConfig+0x2a2>
 8002b00:	e134      	b.n	8002d6c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	0013      	movs	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	189b      	adds	r3, r3, r2
 8002b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d305      	bcc.n	8002b1e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d906      	bls.n	8002b2c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002b1e:	231a      	movs	r3, #26
 8002b20:	2218      	movs	r2, #24
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	19db      	adds	r3, r3, r7
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e11f      	b.n	8002d6c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	6939      	ldr	r1, [r7, #16]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	000b      	movs	r3, r1
 8002b3a:	0e1b      	lsrs	r3, r3, #24
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	0205      	lsls	r5, r0, #8
 8002b40:	431d      	orrs	r5, r3
 8002b42:	000b      	movs	r3, r1
 8002b44:	021c      	lsls	r4, r3, #8
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68b8      	ldr	r0, [r7, #8]
 8002b54:	68f9      	ldr	r1, [r7, #12]
 8002b56:	1900      	adds	r0, r0, r4
 8002b58:	4169      	adcs	r1, r5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f7fd fb6c 	bl	8000244 <__aeabi_uldivmod>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	000b      	movs	r3, r1
 8002b70:	0013      	movs	r3, r2
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b76:	23c0      	movs	r3, #192	; 0xc0
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d309      	bcc.n	8002b92 <UART_SetConfig+0x332>
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	035b      	lsls	r3, r3, #13
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d204      	bcs.n	8002b92 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	e0ec      	b.n	8002d6c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b92:	231a      	movs	r3, #26
 8002b94:	2218      	movs	r2, #24
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	19db      	adds	r3, r3, r7
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e0e5      	b.n	8002d6c <UART_SetConfig+0x50c>
 8002ba0:	efff69f3 	.word	0xefff69f3
 8002ba4:	ffffcfff 	.word	0xffffcfff
 8002ba8:	40004800 	.word	0x40004800
 8002bac:	fffff4ff 	.word	0xfffff4ff
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	40004c00 	.word	0x40004c00
 8002bc0:	40005000 	.word	0x40005000
 8002bc4:	003d0900 	.word	0x003d0900
 8002bc8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d000      	beq.n	8002bda <UART_SetConfig+0x37a>
 8002bd8:	e071      	b.n	8002cbe <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002bda:	231b      	movs	r3, #27
 8002bdc:	2218      	movs	r2, #24
 8002bde:	189b      	adds	r3, r3, r2
 8002be0:	19db      	adds	r3, r3, r7
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d822      	bhi.n	8002c2e <UART_SetConfig+0x3ce>
 8002be8:	009a      	lsls	r2, r3, #2
 8002bea:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <UART_SetConfig+0x52c>)
 8002bec:	18d3      	adds	r3, r2, r3
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf2:	f7ff f8c3 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bfa:	e021      	b.n	8002c40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bfc:	f7ff f8d4 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 8002c00:	0003      	movs	r3, r0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c04:	e01c      	b.n	8002c40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c06:	4b62      	ldr	r3, [pc, #392]	; (8002d90 <UART_SetConfig+0x530>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d002      	beq.n	8002c16 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c10:	4b60      	ldr	r3, [pc, #384]	; (8002d94 <UART_SetConfig+0x534>)
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c14:	e014      	b.n	8002c40 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002c16:	4b60      	ldr	r3, [pc, #384]	; (8002d98 <UART_SetConfig+0x538>)
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c1a:	e011      	b.n	8002c40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1c:	f7fe fffe 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002c20:	0003      	movs	r3, r0
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c24:	e00c      	b.n	8002c40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c2c:	e008      	b.n	8002c40 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c32:	231a      	movs	r3, #26
 8002c34:	2218      	movs	r2, #24
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	19db      	adds	r3, r3, r7
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
        break;
 8002c3e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d100      	bne.n	8002c48 <UART_SetConfig+0x3e8>
 8002c46:	e091      	b.n	8002d6c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	005a      	lsls	r2, r3, #1
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	18d2      	adds	r2, r2, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	0019      	movs	r1, r3
 8002c5a:	0010      	movs	r0, r2
 8002c5c:	f7fd fa66 	bl	800012c <__udivsi3>
 8002c60:	0003      	movs	r3, r0
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d921      	bls.n	8002cb0 <UART_SetConfig+0x450>
 8002c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	025b      	lsls	r3, r3, #9
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d21c      	bcs.n	8002cb0 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	200e      	movs	r0, #14
 8002c7c:	2418      	movs	r4, #24
 8002c7e:	1903      	adds	r3, r0, r4
 8002c80:	19db      	adds	r3, r3, r7
 8002c82:	210f      	movs	r1, #15
 8002c84:	438a      	bics	r2, r1
 8002c86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2207      	movs	r2, #7
 8002c90:	4013      	ands	r3, r2
 8002c92:	b299      	uxth	r1, r3
 8002c94:	1903      	adds	r3, r0, r4
 8002c96:	19db      	adds	r3, r3, r7
 8002c98:	1902      	adds	r2, r0, r4
 8002c9a:	19d2      	adds	r2, r2, r7
 8002c9c:	8812      	ldrh	r2, [r2, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1902      	adds	r2, r0, r4
 8002ca8:	19d2      	adds	r2, r2, r7
 8002caa:	8812      	ldrh	r2, [r2, #0]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	e05d      	b.n	8002d6c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb0:	231a      	movs	r3, #26
 8002cb2:	2218      	movs	r2, #24
 8002cb4:	189b      	adds	r3, r3, r2
 8002cb6:	19db      	adds	r3, r3, r7
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e056      	b.n	8002d6c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cbe:	231b      	movs	r3, #27
 8002cc0:	2218      	movs	r2, #24
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	19db      	adds	r3, r3, r7
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d822      	bhi.n	8002d12 <UART_SetConfig+0x4b2>
 8002ccc:	009a      	lsls	r2, r3, #2
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <UART_SetConfig+0x53c>)
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd6:	f7ff f851 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cde:	e021      	b.n	8002d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce0:	f7ff f862 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce8:	e01c      	b.n	8002d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cea:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <UART_SetConfig+0x530>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d002      	beq.n	8002cfa <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <UART_SetConfig+0x534>)
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cf8:	e014      	b.n	8002d24 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <UART_SetConfig+0x538>)
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cfe:	e011      	b.n	8002d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d00:	f7fe ff8c 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002d04:	0003      	movs	r3, r0
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d08:	e00c      	b.n	8002d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d10:	e008      	b.n	8002d24 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d16:	231a      	movs	r3, #26
 8002d18:	2218      	movs	r2, #24
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	19db      	adds	r3, r3, r7
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
        break;
 8002d22:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d020      	beq.n	8002d6c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	085a      	lsrs	r2, r3, #1
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	18d2      	adds	r2, r2, r3
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0019      	movs	r1, r3
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	f7fd f9f6 	bl	800012c <__udivsi3>
 8002d40:	0003      	movs	r3, r0
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	2b0f      	cmp	r3, #15
 8002d4a:	d909      	bls.n	8002d60 <UART_SetConfig+0x500>
 8002d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	025b      	lsls	r3, r3, #9
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d204      	bcs.n	8002d60 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e005      	b.n	8002d6c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d60:	231a      	movs	r3, #26
 8002d62:	2218      	movs	r2, #24
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	19db      	adds	r3, r3, r7
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2200      	movs	r2, #0
 8002d76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d78:	231a      	movs	r3, #26
 8002d7a:	2218      	movs	r2, #24
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	19db      	adds	r3, r3, r7
 8002d80:	781b      	ldrb	r3, [r3, #0]
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b00e      	add	sp, #56	; 0x38
 8002d88:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	08003b5c 	.word	0x08003b5c
 8002d90:	40021000 	.word	0x40021000
 8002d94:	003d0900 	.word	0x003d0900
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	08003b80 	.word	0x08003b80

08002da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	d00b      	beq.n	8002dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <UART_AdvFeatureConfig+0x144>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d00b      	beq.n	8002dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <UART_AdvFeatureConfig+0x148>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2204      	movs	r2, #4
 8002df2:	4013      	ands	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <UART_AdvFeatureConfig+0x14c>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2208      	movs	r2, #8
 8002e14:	4013      	ands	r3, r2
 8002e16:	d00b      	beq.n	8002e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <UART_AdvFeatureConfig+0x150>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2210      	movs	r2, #16
 8002e36:	4013      	ands	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <UART_AdvFeatureConfig+0x154>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2220      	movs	r2, #32
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <UART_AdvFeatureConfig+0x158>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2240      	movs	r2, #64	; 0x40
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <UART_AdvFeatureConfig+0x15c>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	035b      	lsls	r3, r3, #13
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d10b      	bne.n	8002eba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a15      	ldr	r2, [pc, #84]	; (8002f00 <UART_AdvFeatureConfig+0x160>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <UART_AdvFeatureConfig+0x164>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	fffdffff 	.word	0xfffdffff
 8002ee8:	fffeffff 	.word	0xfffeffff
 8002eec:	fffbffff 	.word	0xfffbffff
 8002ef0:	ffff7fff 	.word	0xffff7fff
 8002ef4:	ffffefff 	.word	0xffffefff
 8002ef8:	ffffdfff 	.word	0xffffdfff
 8002efc:	ffefffff 	.word	0xffefffff
 8002f00:	ff9fffff 	.word	0xff9fffff
 8002f04:	fff7ffff 	.word	0xfff7ffff

08002f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	2100      	movs	r1, #0
 8002f16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f18:	f7fd feb6 	bl	8000c88 <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2208      	movs	r2, #8
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d10c      	bne.n	8002f48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0391      	lsls	r1, r2, #14
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <UART_CheckIdleState+0x8c>)
 8002f38:	9200      	str	r2, [sp, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f000 f82c 	bl	8002f98 <UART_WaitOnFlagUntilTimeout>
 8002f40:	1e03      	subs	r3, r0, #0
 8002f42:	d001      	beq.n	8002f48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e021      	b.n	8002f8c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d10c      	bne.n	8002f70 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	03d1      	lsls	r1, r2, #15
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <UART_CheckIdleState+0x8c>)
 8002f60:	9200      	str	r2, [sp, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f000 f818 	bl	8002f98 <UART_WaitOnFlagUntilTimeout>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e00d      	b.n	8002f8c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2274      	movs	r2, #116	; 0x74
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	01ffffff 	.word	0x01ffffff

08002f98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b094      	sub	sp, #80	; 0x50
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa8:	e0a3      	b.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fac:	3301      	adds	r3, #1
 8002fae:	d100      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fb0:	e09f      	b.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fd fe69 	bl	8000c88 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d13d      	bne.n	8003044 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	f383 8810 	msr	PRIMASK, r3
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	494c      	ldr	r1, [pc, #304]	; (800311c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003002:	643b      	str	r3, [r7, #64]	; 0x40
 8003004:	2301      	movs	r3, #1
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	438a      	bics	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	f383 8810 	msr	PRIMASK, r3
}
 800302a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2274      	movs	r2, #116	; 0x74
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e067      	b.n	8003114 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	d050      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	401a      	ands	r2, r3
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	429a      	cmp	r2, r3
 8003062:	d146      	bne.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800306e:	f3ef 8310 	mrs	r3, PRIMASK
 8003072:	613b      	str	r3, [r7, #16]
  return(result);
 8003074:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003078:	2301      	movs	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f383 8810 	msr	PRIMASK, r3
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4923      	ldr	r1, [pc, #140]	; (800311c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003090:	400a      	ands	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f383 8810 	msr	PRIMASK, r3
}
 800309e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a0:	f3ef 8310 	mrs	r3, PRIMASK
 80030a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80030a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030aa:	2301      	movs	r3, #1
 80030ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	438a      	bics	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	2120      	movs	r1, #32
 80030e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2274      	movs	r2, #116	; 0x74
 80030ea:	2100      	movs	r1, #0
 80030ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e010      	b.n	8003114 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	425a      	negs	r2, r3
 8003102:	4153      	adcs	r3, r2
 8003104:	b2db      	uxtb	r3, r3
 8003106:	001a      	movs	r2, r3
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d100      	bne.n	8003112 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003110:	e74b      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b014      	add	sp, #80	; 0x50
 800311a:	bd80      	pop	{r7, pc}
 800311c:	fffffe5f 	.word	0xfffffe5f

08003120 <__errno>:
 8003120:	4b01      	ldr	r3, [pc, #4]	; (8003128 <__errno+0x8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	4770      	bx	lr
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	20000014 	.word	0x20000014

0800312c <exit>:
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <exit+0x24>)
 800312e:	b510      	push	{r4, lr}
 8003130:	0004      	movs	r4, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <exit+0x10>
 8003136:	2100      	movs	r1, #0
 8003138:	e000      	b.n	800313c <exit+0x10>
 800313a:	bf00      	nop
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <exit+0x28>)
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d000      	beq.n	8003148 <exit+0x1c>
 8003146:	4798      	blx	r3
 8003148:	0020      	movs	r0, r4
 800314a:	f7fd fcc5 	bl	8000ad8 <_exit>
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	00000000 	.word	0x00000000
 8003154:	08003ba4 	.word	0x08003ba4

08003158 <__libc_init_array>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	2600      	movs	r6, #0
 800315c:	4d0c      	ldr	r5, [pc, #48]	; (8003190 <__libc_init_array+0x38>)
 800315e:	4c0d      	ldr	r4, [pc, #52]	; (8003194 <__libc_init_array+0x3c>)
 8003160:	1b64      	subs	r4, r4, r5
 8003162:	10a4      	asrs	r4, r4, #2
 8003164:	42a6      	cmp	r6, r4
 8003166:	d109      	bne.n	800317c <__libc_init_array+0x24>
 8003168:	2600      	movs	r6, #0
 800316a:	f000 fcbd 	bl	8003ae8 <_init>
 800316e:	4d0a      	ldr	r5, [pc, #40]	; (8003198 <__libc_init_array+0x40>)
 8003170:	4c0a      	ldr	r4, [pc, #40]	; (800319c <__libc_init_array+0x44>)
 8003172:	1b64      	subs	r4, r4, r5
 8003174:	10a4      	asrs	r4, r4, #2
 8003176:	42a6      	cmp	r6, r4
 8003178:	d105      	bne.n	8003186 <__libc_init_array+0x2e>
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	00b3      	lsls	r3, r6, #2
 800317e:	58eb      	ldr	r3, [r5, r3]
 8003180:	4798      	blx	r3
 8003182:	3601      	adds	r6, #1
 8003184:	e7ee      	b.n	8003164 <__libc_init_array+0xc>
 8003186:	00b3      	lsls	r3, r6, #2
 8003188:	58eb      	ldr	r3, [r5, r3]
 800318a:	4798      	blx	r3
 800318c:	3601      	adds	r6, #1
 800318e:	e7f2      	b.n	8003176 <__libc_init_array+0x1e>
 8003190:	08003be4 	.word	0x08003be4
 8003194:	08003be4 	.word	0x08003be4
 8003198:	08003be4 	.word	0x08003be4
 800319c:	08003be8 	.word	0x08003be8

080031a0 <malloc>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <malloc+0x10>)
 80031a4:	0001      	movs	r1, r0
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	f000 f882 	bl	80032b0 <_malloc_r>
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	20000014 	.word	0x20000014

080031b4 <free>:
 80031b4:	b510      	push	{r4, lr}
 80031b6:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <free+0x10>)
 80031b8:	0001      	movs	r1, r0
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	f000 f80c 	bl	80031d8 <_free_r>
 80031c0:	bd10      	pop	{r4, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	20000014 	.word	0x20000014

080031c8 <memset>:
 80031c8:	0003      	movs	r3, r0
 80031ca:	1882      	adds	r2, r0, r2
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d100      	bne.n	80031d2 <memset+0xa>
 80031d0:	4770      	bx	lr
 80031d2:	7019      	strb	r1, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e7f9      	b.n	80031cc <memset+0x4>

080031d8 <_free_r>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	0005      	movs	r5, r0
 80031dc:	2900      	cmp	r1, #0
 80031de:	d010      	beq.n	8003202 <_free_r+0x2a>
 80031e0:	1f0c      	subs	r4, r1, #4
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da00      	bge.n	80031ea <_free_r+0x12>
 80031e8:	18e4      	adds	r4, r4, r3
 80031ea:	0028      	movs	r0, r5
 80031ec:	f000 f928 	bl	8003440 <__malloc_lock>
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <_free_r+0x90>)
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <_free_r+0x2c>
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	6014      	str	r4, [r2, #0]
 80031fc:	0028      	movs	r0, r5
 80031fe:	f000 f927 	bl	8003450 <__malloc_unlock>
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	42a3      	cmp	r3, r4
 8003206:	d908      	bls.n	800321a <_free_r+0x42>
 8003208:	6821      	ldr	r1, [r4, #0]
 800320a:	1860      	adds	r0, r4, r1
 800320c:	4283      	cmp	r3, r0
 800320e:	d1f3      	bne.n	80031f8 <_free_r+0x20>
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	1841      	adds	r1, r0, r1
 8003216:	6021      	str	r1, [r4, #0]
 8003218:	e7ee      	b.n	80031f8 <_free_r+0x20>
 800321a:	001a      	movs	r2, r3
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <_free_r+0x4e>
 8003222:	42a3      	cmp	r3, r4
 8003224:	d9f9      	bls.n	800321a <_free_r+0x42>
 8003226:	6811      	ldr	r1, [r2, #0]
 8003228:	1850      	adds	r0, r2, r1
 800322a:	42a0      	cmp	r0, r4
 800322c:	d10b      	bne.n	8003246 <_free_r+0x6e>
 800322e:	6820      	ldr	r0, [r4, #0]
 8003230:	1809      	adds	r1, r1, r0
 8003232:	1850      	adds	r0, r2, r1
 8003234:	6011      	str	r1, [r2, #0]
 8003236:	4283      	cmp	r3, r0
 8003238:	d1e0      	bne.n	80031fc <_free_r+0x24>
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	1841      	adds	r1, r0, r1
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	6053      	str	r3, [r2, #4]
 8003244:	e7da      	b.n	80031fc <_free_r+0x24>
 8003246:	42a0      	cmp	r0, r4
 8003248:	d902      	bls.n	8003250 <_free_r+0x78>
 800324a:	230c      	movs	r3, #12
 800324c:	602b      	str	r3, [r5, #0]
 800324e:	e7d5      	b.n	80031fc <_free_r+0x24>
 8003250:	6821      	ldr	r1, [r4, #0]
 8003252:	1860      	adds	r0, r4, r1
 8003254:	4283      	cmp	r3, r0
 8003256:	d103      	bne.n	8003260 <_free_r+0x88>
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	1841      	adds	r1, r0, r1
 800325e:	6021      	str	r1, [r4, #0]
 8003260:	6063      	str	r3, [r4, #4]
 8003262:	6054      	str	r4, [r2, #4]
 8003264:	e7ca      	b.n	80031fc <_free_r+0x24>
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	200001cc 	.word	0x200001cc

0800326c <sbrk_aligned>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	4e0f      	ldr	r6, [pc, #60]	; (80032ac <sbrk_aligned+0x40>)
 8003270:	000d      	movs	r5, r1
 8003272:	6831      	ldr	r1, [r6, #0]
 8003274:	0004      	movs	r4, r0
 8003276:	2900      	cmp	r1, #0
 8003278:	d102      	bne.n	8003280 <sbrk_aligned+0x14>
 800327a:	f000 f88f 	bl	800339c <_sbrk_r>
 800327e:	6030      	str	r0, [r6, #0]
 8003280:	0029      	movs	r1, r5
 8003282:	0020      	movs	r0, r4
 8003284:	f000 f88a 	bl	800339c <_sbrk_r>
 8003288:	1c43      	adds	r3, r0, #1
 800328a:	d00a      	beq.n	80032a2 <sbrk_aligned+0x36>
 800328c:	2303      	movs	r3, #3
 800328e:	1cc5      	adds	r5, r0, #3
 8003290:	439d      	bics	r5, r3
 8003292:	42a8      	cmp	r0, r5
 8003294:	d007      	beq.n	80032a6 <sbrk_aligned+0x3a>
 8003296:	1a29      	subs	r1, r5, r0
 8003298:	0020      	movs	r0, r4
 800329a:	f000 f87f 	bl	800339c <_sbrk_r>
 800329e:	1c43      	adds	r3, r0, #1
 80032a0:	d101      	bne.n	80032a6 <sbrk_aligned+0x3a>
 80032a2:	2501      	movs	r5, #1
 80032a4:	426d      	negs	r5, r5
 80032a6:	0028      	movs	r0, r5
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	200001d0 	.word	0x200001d0

080032b0 <_malloc_r>:
 80032b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032b2:	2203      	movs	r2, #3
 80032b4:	1ccb      	adds	r3, r1, #3
 80032b6:	4393      	bics	r3, r2
 80032b8:	3308      	adds	r3, #8
 80032ba:	0006      	movs	r6, r0
 80032bc:	001f      	movs	r7, r3
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d232      	bcs.n	8003328 <_malloc_r+0x78>
 80032c2:	270c      	movs	r7, #12
 80032c4:	42b9      	cmp	r1, r7
 80032c6:	d831      	bhi.n	800332c <_malloc_r+0x7c>
 80032c8:	0030      	movs	r0, r6
 80032ca:	f000 f8b9 	bl	8003440 <__malloc_lock>
 80032ce:	4d32      	ldr	r5, [pc, #200]	; (8003398 <_malloc_r+0xe8>)
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	001c      	movs	r4, r3
 80032d4:	2c00      	cmp	r4, #0
 80032d6:	d12e      	bne.n	8003336 <_malloc_r+0x86>
 80032d8:	0039      	movs	r1, r7
 80032da:	0030      	movs	r0, r6
 80032dc:	f7ff ffc6 	bl	800326c <sbrk_aligned>
 80032e0:	0004      	movs	r4, r0
 80032e2:	1c43      	adds	r3, r0, #1
 80032e4:	d11e      	bne.n	8003324 <_malloc_r+0x74>
 80032e6:	682c      	ldr	r4, [r5, #0]
 80032e8:	0025      	movs	r5, r4
 80032ea:	2d00      	cmp	r5, #0
 80032ec:	d14a      	bne.n	8003384 <_malloc_r+0xd4>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	0029      	movs	r1, r5
 80032f2:	18e3      	adds	r3, r4, r3
 80032f4:	0030      	movs	r0, r6
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	f000 f850 	bl	800339c <_sbrk_r>
 80032fc:	9b01      	ldr	r3, [sp, #4]
 80032fe:	4283      	cmp	r3, r0
 8003300:	d143      	bne.n	800338a <_malloc_r+0xda>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	3703      	adds	r7, #3
 8003306:	1aff      	subs	r7, r7, r3
 8003308:	2303      	movs	r3, #3
 800330a:	439f      	bics	r7, r3
 800330c:	3708      	adds	r7, #8
 800330e:	2f0c      	cmp	r7, #12
 8003310:	d200      	bcs.n	8003314 <_malloc_r+0x64>
 8003312:	270c      	movs	r7, #12
 8003314:	0039      	movs	r1, r7
 8003316:	0030      	movs	r0, r6
 8003318:	f7ff ffa8 	bl	800326c <sbrk_aligned>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d034      	beq.n	800338a <_malloc_r+0xda>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	19df      	adds	r7, r3, r7
 8003324:	6027      	str	r7, [r4, #0]
 8003326:	e013      	b.n	8003350 <_malloc_r+0xa0>
 8003328:	2b00      	cmp	r3, #0
 800332a:	dacb      	bge.n	80032c4 <_malloc_r+0x14>
 800332c:	230c      	movs	r3, #12
 800332e:	2500      	movs	r5, #0
 8003330:	6033      	str	r3, [r6, #0]
 8003332:	0028      	movs	r0, r5
 8003334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	1bd1      	subs	r1, r2, r7
 800333a:	d420      	bmi.n	800337e <_malloc_r+0xce>
 800333c:	290b      	cmp	r1, #11
 800333e:	d917      	bls.n	8003370 <_malloc_r+0xc0>
 8003340:	19e2      	adds	r2, r4, r7
 8003342:	6027      	str	r7, [r4, #0]
 8003344:	42a3      	cmp	r3, r4
 8003346:	d111      	bne.n	800336c <_malloc_r+0xbc>
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	6863      	ldr	r3, [r4, #4]
 800334c:	6011      	str	r1, [r2, #0]
 800334e:	6053      	str	r3, [r2, #4]
 8003350:	0030      	movs	r0, r6
 8003352:	0025      	movs	r5, r4
 8003354:	f000 f87c 	bl	8003450 <__malloc_unlock>
 8003358:	2207      	movs	r2, #7
 800335a:	350b      	adds	r5, #11
 800335c:	1d23      	adds	r3, r4, #4
 800335e:	4395      	bics	r5, r2
 8003360:	1aea      	subs	r2, r5, r3
 8003362:	429d      	cmp	r5, r3
 8003364:	d0e5      	beq.n	8003332 <_malloc_r+0x82>
 8003366:	1b5b      	subs	r3, r3, r5
 8003368:	50a3      	str	r3, [r4, r2]
 800336a:	e7e2      	b.n	8003332 <_malloc_r+0x82>
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e7ec      	b.n	800334a <_malloc_r+0x9a>
 8003370:	6862      	ldr	r2, [r4, #4]
 8003372:	42a3      	cmp	r3, r4
 8003374:	d101      	bne.n	800337a <_malloc_r+0xca>
 8003376:	602a      	str	r2, [r5, #0]
 8003378:	e7ea      	b.n	8003350 <_malloc_r+0xa0>
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	e7e8      	b.n	8003350 <_malloc_r+0xa0>
 800337e:	0023      	movs	r3, r4
 8003380:	6864      	ldr	r4, [r4, #4]
 8003382:	e7a7      	b.n	80032d4 <_malloc_r+0x24>
 8003384:	002c      	movs	r4, r5
 8003386:	686d      	ldr	r5, [r5, #4]
 8003388:	e7af      	b.n	80032ea <_malloc_r+0x3a>
 800338a:	230c      	movs	r3, #12
 800338c:	0030      	movs	r0, r6
 800338e:	6033      	str	r3, [r6, #0]
 8003390:	f000 f85e 	bl	8003450 <__malloc_unlock>
 8003394:	e7cd      	b.n	8003332 <_malloc_r+0x82>
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	200001cc 	.word	0x200001cc

0800339c <_sbrk_r>:
 800339c:	2300      	movs	r3, #0
 800339e:	b570      	push	{r4, r5, r6, lr}
 80033a0:	4d06      	ldr	r5, [pc, #24]	; (80033bc <_sbrk_r+0x20>)
 80033a2:	0004      	movs	r4, r0
 80033a4:	0008      	movs	r0, r1
 80033a6:	602b      	str	r3, [r5, #0]
 80033a8:	f7fd fba2 	bl	8000af0 <_sbrk>
 80033ac:	1c43      	adds	r3, r0, #1
 80033ae:	d103      	bne.n	80033b8 <_sbrk_r+0x1c>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d000      	beq.n	80033b8 <_sbrk_r+0x1c>
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	bd70      	pop	{r4, r5, r6, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	200001d4 	.word	0x200001d4

080033c0 <siprintf>:
 80033c0:	b40e      	push	{r1, r2, r3}
 80033c2:	b500      	push	{lr}
 80033c4:	490b      	ldr	r1, [pc, #44]	; (80033f4 <siprintf+0x34>)
 80033c6:	b09c      	sub	sp, #112	; 0x70
 80033c8:	ab1d      	add	r3, sp, #116	; 0x74
 80033ca:	9002      	str	r0, [sp, #8]
 80033cc:	9006      	str	r0, [sp, #24]
 80033ce:	9107      	str	r1, [sp, #28]
 80033d0:	9104      	str	r1, [sp, #16]
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <siprintf+0x38>)
 80033d4:	4909      	ldr	r1, [pc, #36]	; (80033fc <siprintf+0x3c>)
 80033d6:	cb04      	ldmia	r3!, {r2}
 80033d8:	9105      	str	r1, [sp, #20]
 80033da:	6800      	ldr	r0, [r0, #0]
 80033dc:	a902      	add	r1, sp, #8
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	f000 f8a0 	bl	8003524 <_svfiprintf_r>
 80033e4:	2300      	movs	r3, #0
 80033e6:	9a02      	ldr	r2, [sp, #8]
 80033e8:	7013      	strb	r3, [r2, #0]
 80033ea:	b01c      	add	sp, #112	; 0x70
 80033ec:	bc08      	pop	{r3}
 80033ee:	b003      	add	sp, #12
 80033f0:	4718      	bx	r3
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	7fffffff 	.word	0x7fffffff
 80033f8:	20000014 	.word	0x20000014
 80033fc:	ffff0208 	.word	0xffff0208

08003400 <strchr>:
 8003400:	b2c9      	uxtb	r1, r1
 8003402:	7803      	ldrb	r3, [r0, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <strchr+0x12>
 8003408:	428b      	cmp	r3, r1
 800340a:	d100      	bne.n	800340e <strchr+0xe>
 800340c:	4770      	bx	lr
 800340e:	3001      	adds	r0, #1
 8003410:	e7f7      	b.n	8003402 <strchr+0x2>
 8003412:	424b      	negs	r3, r1
 8003414:	4159      	adcs	r1, r3
 8003416:	4249      	negs	r1, r1
 8003418:	4008      	ands	r0, r1
 800341a:	e7f7      	b.n	800340c <strchr+0xc>

0800341c <strncmp>:
 800341c:	b530      	push	{r4, r5, lr}
 800341e:	0005      	movs	r5, r0
 8003420:	1e10      	subs	r0, r2, #0
 8003422:	d008      	beq.n	8003436 <strncmp+0x1a>
 8003424:	2400      	movs	r4, #0
 8003426:	3a01      	subs	r2, #1
 8003428:	5d2b      	ldrb	r3, [r5, r4]
 800342a:	5d08      	ldrb	r0, [r1, r4]
 800342c:	4283      	cmp	r3, r0
 800342e:	d101      	bne.n	8003434 <strncmp+0x18>
 8003430:	4294      	cmp	r4, r2
 8003432:	d101      	bne.n	8003438 <strncmp+0x1c>
 8003434:	1a18      	subs	r0, r3, r0
 8003436:	bd30      	pop	{r4, r5, pc}
 8003438:	3401      	adds	r4, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f4      	bne.n	8003428 <strncmp+0xc>
 800343e:	e7f9      	b.n	8003434 <strncmp+0x18>

08003440 <__malloc_lock>:
 8003440:	b510      	push	{r4, lr}
 8003442:	4802      	ldr	r0, [pc, #8]	; (800344c <__malloc_lock+0xc>)
 8003444:	f000 faf0 	bl	8003a28 <__retarget_lock_acquire_recursive>
 8003448:	bd10      	pop	{r4, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	200001d8 	.word	0x200001d8

08003450 <__malloc_unlock>:
 8003450:	b510      	push	{r4, lr}
 8003452:	4802      	ldr	r0, [pc, #8]	; (800345c <__malloc_unlock+0xc>)
 8003454:	f000 fae9 	bl	8003a2a <__retarget_lock_release_recursive>
 8003458:	bd10      	pop	{r4, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	200001d8 	.word	0x200001d8

08003460 <__ssputs_r>:
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	688e      	ldr	r6, [r1, #8]
 8003464:	b085      	sub	sp, #20
 8003466:	0007      	movs	r7, r0
 8003468:	000c      	movs	r4, r1
 800346a:	9203      	str	r2, [sp, #12]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	429e      	cmp	r6, r3
 8003470:	d83c      	bhi.n	80034ec <__ssputs_r+0x8c>
 8003472:	2390      	movs	r3, #144	; 0x90
 8003474:	898a      	ldrh	r2, [r1, #12]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	421a      	tst	r2, r3
 800347a:	d034      	beq.n	80034e6 <__ssputs_r+0x86>
 800347c:	6909      	ldr	r1, [r1, #16]
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	6960      	ldr	r0, [r4, #20]
 8003482:	1a5b      	subs	r3, r3, r1
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	2303      	movs	r3, #3
 8003488:	4343      	muls	r3, r0
 800348a:	0fdd      	lsrs	r5, r3, #31
 800348c:	18ed      	adds	r5, r5, r3
 800348e:	9b01      	ldr	r3, [sp, #4]
 8003490:	9802      	ldr	r0, [sp, #8]
 8003492:	3301      	adds	r3, #1
 8003494:	181b      	adds	r3, r3, r0
 8003496:	106d      	asrs	r5, r5, #1
 8003498:	42ab      	cmp	r3, r5
 800349a:	d900      	bls.n	800349e <__ssputs_r+0x3e>
 800349c:	001d      	movs	r5, r3
 800349e:	0553      	lsls	r3, r2, #21
 80034a0:	d532      	bpl.n	8003508 <__ssputs_r+0xa8>
 80034a2:	0029      	movs	r1, r5
 80034a4:	0038      	movs	r0, r7
 80034a6:	f7ff ff03 	bl	80032b0 <_malloc_r>
 80034aa:	1e06      	subs	r6, r0, #0
 80034ac:	d109      	bne.n	80034c2 <__ssputs_r+0x62>
 80034ae:	230c      	movs	r3, #12
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	2340      	movs	r3, #64	; 0x40
 80034b4:	2001      	movs	r0, #1
 80034b6:	89a2      	ldrh	r2, [r4, #12]
 80034b8:	4240      	negs	r0, r0
 80034ba:	4313      	orrs	r3, r2
 80034bc:	81a3      	strh	r3, [r4, #12]
 80034be:	b005      	add	sp, #20
 80034c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c2:	9a02      	ldr	r2, [sp, #8]
 80034c4:	6921      	ldr	r1, [r4, #16]
 80034c6:	f000 fabc 	bl	8003a42 <memcpy>
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <__ssputs_r+0xc0>)
 80034ce:	401a      	ands	r2, r3
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	4313      	orrs	r3, r2
 80034d4:	81a3      	strh	r3, [r4, #12]
 80034d6:	9b02      	ldr	r3, [sp, #8]
 80034d8:	6126      	str	r6, [r4, #16]
 80034da:	18f6      	adds	r6, r6, r3
 80034dc:	6026      	str	r6, [r4, #0]
 80034de:	6165      	str	r5, [r4, #20]
 80034e0:	9e01      	ldr	r6, [sp, #4]
 80034e2:	1aed      	subs	r5, r5, r3
 80034e4:	60a5      	str	r5, [r4, #8]
 80034e6:	9b01      	ldr	r3, [sp, #4]
 80034e8:	429e      	cmp	r6, r3
 80034ea:	d900      	bls.n	80034ee <__ssputs_r+0x8e>
 80034ec:	9e01      	ldr	r6, [sp, #4]
 80034ee:	0032      	movs	r2, r6
 80034f0:	9903      	ldr	r1, [sp, #12]
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	f000 faae 	bl	8003a54 <memmove>
 80034f8:	68a3      	ldr	r3, [r4, #8]
 80034fa:	2000      	movs	r0, #0
 80034fc:	1b9b      	subs	r3, r3, r6
 80034fe:	60a3      	str	r3, [r4, #8]
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	199e      	adds	r6, r3, r6
 8003504:	6026      	str	r6, [r4, #0]
 8003506:	e7da      	b.n	80034be <__ssputs_r+0x5e>
 8003508:	002a      	movs	r2, r5
 800350a:	0038      	movs	r0, r7
 800350c:	f000 fab5 	bl	8003a7a <_realloc_r>
 8003510:	1e06      	subs	r6, r0, #0
 8003512:	d1e0      	bne.n	80034d6 <__ssputs_r+0x76>
 8003514:	0038      	movs	r0, r7
 8003516:	6921      	ldr	r1, [r4, #16]
 8003518:	f7ff fe5e 	bl	80031d8 <_free_r>
 800351c:	e7c7      	b.n	80034ae <__ssputs_r+0x4e>
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	fffffb7f 	.word	0xfffffb7f

08003524 <_svfiprintf_r>:
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003526:	b0a1      	sub	sp, #132	; 0x84
 8003528:	9003      	str	r0, [sp, #12]
 800352a:	001d      	movs	r5, r3
 800352c:	898b      	ldrh	r3, [r1, #12]
 800352e:	000f      	movs	r7, r1
 8003530:	0016      	movs	r6, r2
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	d511      	bpl.n	800355a <_svfiprintf_r+0x36>
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10e      	bne.n	800355a <_svfiprintf_r+0x36>
 800353c:	2140      	movs	r1, #64	; 0x40
 800353e:	f7ff feb7 	bl	80032b0 <_malloc_r>
 8003542:	6038      	str	r0, [r7, #0]
 8003544:	6138      	str	r0, [r7, #16]
 8003546:	2800      	cmp	r0, #0
 8003548:	d105      	bne.n	8003556 <_svfiprintf_r+0x32>
 800354a:	230c      	movs	r3, #12
 800354c:	9a03      	ldr	r2, [sp, #12]
 800354e:	3801      	subs	r0, #1
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	b021      	add	sp, #132	; 0x84
 8003554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	2300      	movs	r3, #0
 800355c:	ac08      	add	r4, sp, #32
 800355e:	6163      	str	r3, [r4, #20]
 8003560:	3320      	adds	r3, #32
 8003562:	7663      	strb	r3, [r4, #25]
 8003564:	3310      	adds	r3, #16
 8003566:	76a3      	strb	r3, [r4, #26]
 8003568:	9507      	str	r5, [sp, #28]
 800356a:	0035      	movs	r5, r6
 800356c:	782b      	ldrb	r3, [r5, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <_svfiprintf_r+0x52>
 8003572:	2b25      	cmp	r3, #37	; 0x25
 8003574:	d147      	bne.n	8003606 <_svfiprintf_r+0xe2>
 8003576:	1bab      	subs	r3, r5, r6
 8003578:	9305      	str	r3, [sp, #20]
 800357a:	42b5      	cmp	r5, r6
 800357c:	d00c      	beq.n	8003598 <_svfiprintf_r+0x74>
 800357e:	0032      	movs	r2, r6
 8003580:	0039      	movs	r1, r7
 8003582:	9803      	ldr	r0, [sp, #12]
 8003584:	f7ff ff6c 	bl	8003460 <__ssputs_r>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d100      	bne.n	800358e <_svfiprintf_r+0x6a>
 800358c:	e0ae      	b.n	80036ec <_svfiprintf_r+0x1c8>
 800358e:	6962      	ldr	r2, [r4, #20]
 8003590:	9b05      	ldr	r3, [sp, #20]
 8003592:	4694      	mov	ip, r2
 8003594:	4463      	add	r3, ip
 8003596:	6163      	str	r3, [r4, #20]
 8003598:	782b      	ldrb	r3, [r5, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d100      	bne.n	80035a0 <_svfiprintf_r+0x7c>
 800359e:	e0a5      	b.n	80036ec <_svfiprintf_r+0x1c8>
 80035a0:	2201      	movs	r2, #1
 80035a2:	2300      	movs	r3, #0
 80035a4:	4252      	negs	r2, r2
 80035a6:	6062      	str	r2, [r4, #4]
 80035a8:	a904      	add	r1, sp, #16
 80035aa:	3254      	adds	r2, #84	; 0x54
 80035ac:	1852      	adds	r2, r2, r1
 80035ae:	1c6e      	adds	r6, r5, #1
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	60e3      	str	r3, [r4, #12]
 80035b4:	60a3      	str	r3, [r4, #8]
 80035b6:	7013      	strb	r3, [r2, #0]
 80035b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80035ba:	2205      	movs	r2, #5
 80035bc:	7831      	ldrb	r1, [r6, #0]
 80035be:	4854      	ldr	r0, [pc, #336]	; (8003710 <_svfiprintf_r+0x1ec>)
 80035c0:	f000 fa34 	bl	8003a2c <memchr>
 80035c4:	1c75      	adds	r5, r6, #1
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d11f      	bne.n	800360a <_svfiprintf_r+0xe6>
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	06d3      	lsls	r3, r2, #27
 80035ce:	d504      	bpl.n	80035da <_svfiprintf_r+0xb6>
 80035d0:	2353      	movs	r3, #83	; 0x53
 80035d2:	a904      	add	r1, sp, #16
 80035d4:	185b      	adds	r3, r3, r1
 80035d6:	2120      	movs	r1, #32
 80035d8:	7019      	strb	r1, [r3, #0]
 80035da:	0713      	lsls	r3, r2, #28
 80035dc:	d504      	bpl.n	80035e8 <_svfiprintf_r+0xc4>
 80035de:	2353      	movs	r3, #83	; 0x53
 80035e0:	a904      	add	r1, sp, #16
 80035e2:	185b      	adds	r3, r3, r1
 80035e4:	212b      	movs	r1, #43	; 0x2b
 80035e6:	7019      	strb	r1, [r3, #0]
 80035e8:	7833      	ldrb	r3, [r6, #0]
 80035ea:	2b2a      	cmp	r3, #42	; 0x2a
 80035ec:	d016      	beq.n	800361c <_svfiprintf_r+0xf8>
 80035ee:	0035      	movs	r5, r6
 80035f0:	2100      	movs	r1, #0
 80035f2:	200a      	movs	r0, #10
 80035f4:	68e3      	ldr	r3, [r4, #12]
 80035f6:	782a      	ldrb	r2, [r5, #0]
 80035f8:	1c6e      	adds	r6, r5, #1
 80035fa:	3a30      	subs	r2, #48	; 0x30
 80035fc:	2a09      	cmp	r2, #9
 80035fe:	d94e      	bls.n	800369e <_svfiprintf_r+0x17a>
 8003600:	2900      	cmp	r1, #0
 8003602:	d111      	bne.n	8003628 <_svfiprintf_r+0x104>
 8003604:	e017      	b.n	8003636 <_svfiprintf_r+0x112>
 8003606:	3501      	adds	r5, #1
 8003608:	e7b0      	b.n	800356c <_svfiprintf_r+0x48>
 800360a:	4b41      	ldr	r3, [pc, #260]	; (8003710 <_svfiprintf_r+0x1ec>)
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	1ac0      	subs	r0, r0, r3
 8003610:	2301      	movs	r3, #1
 8003612:	4083      	lsls	r3, r0
 8003614:	4313      	orrs	r3, r2
 8003616:	002e      	movs	r6, r5
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	e7ce      	b.n	80035ba <_svfiprintf_r+0x96>
 800361c:	9b07      	ldr	r3, [sp, #28]
 800361e:	1d19      	adds	r1, r3, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	9107      	str	r1, [sp, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db01      	blt.n	800362c <_svfiprintf_r+0x108>
 8003628:	930b      	str	r3, [sp, #44]	; 0x2c
 800362a:	e004      	b.n	8003636 <_svfiprintf_r+0x112>
 800362c:	425b      	negs	r3, r3
 800362e:	60e3      	str	r3, [r4, #12]
 8003630:	2302      	movs	r3, #2
 8003632:	4313      	orrs	r3, r2
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	782b      	ldrb	r3, [r5, #0]
 8003638:	2b2e      	cmp	r3, #46	; 0x2e
 800363a:	d10a      	bne.n	8003652 <_svfiprintf_r+0x12e>
 800363c:	786b      	ldrb	r3, [r5, #1]
 800363e:	2b2a      	cmp	r3, #42	; 0x2a
 8003640:	d135      	bne.n	80036ae <_svfiprintf_r+0x18a>
 8003642:	9b07      	ldr	r3, [sp, #28]
 8003644:	3502      	adds	r5, #2
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	9207      	str	r2, [sp, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	db2b      	blt.n	80036a8 <_svfiprintf_r+0x184>
 8003650:	9309      	str	r3, [sp, #36]	; 0x24
 8003652:	4e30      	ldr	r6, [pc, #192]	; (8003714 <_svfiprintf_r+0x1f0>)
 8003654:	2203      	movs	r2, #3
 8003656:	0030      	movs	r0, r6
 8003658:	7829      	ldrb	r1, [r5, #0]
 800365a:	f000 f9e7 	bl	8003a2c <memchr>
 800365e:	2800      	cmp	r0, #0
 8003660:	d006      	beq.n	8003670 <_svfiprintf_r+0x14c>
 8003662:	2340      	movs	r3, #64	; 0x40
 8003664:	1b80      	subs	r0, r0, r6
 8003666:	4083      	lsls	r3, r0
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	3501      	adds	r5, #1
 800366c:	4313      	orrs	r3, r2
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	7829      	ldrb	r1, [r5, #0]
 8003672:	2206      	movs	r2, #6
 8003674:	4828      	ldr	r0, [pc, #160]	; (8003718 <_svfiprintf_r+0x1f4>)
 8003676:	1c6e      	adds	r6, r5, #1
 8003678:	7621      	strb	r1, [r4, #24]
 800367a:	f000 f9d7 	bl	8003a2c <memchr>
 800367e:	2800      	cmp	r0, #0
 8003680:	d03c      	beq.n	80036fc <_svfiprintf_r+0x1d8>
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <_svfiprintf_r+0x1f8>)
 8003684:	2b00      	cmp	r3, #0
 8003686:	d125      	bne.n	80036d4 <_svfiprintf_r+0x1b0>
 8003688:	2207      	movs	r2, #7
 800368a:	9b07      	ldr	r3, [sp, #28]
 800368c:	3307      	adds	r3, #7
 800368e:	4393      	bics	r3, r2
 8003690:	3308      	adds	r3, #8
 8003692:	9307      	str	r3, [sp, #28]
 8003694:	6963      	ldr	r3, [r4, #20]
 8003696:	9a04      	ldr	r2, [sp, #16]
 8003698:	189b      	adds	r3, r3, r2
 800369a:	6163      	str	r3, [r4, #20]
 800369c:	e765      	b.n	800356a <_svfiprintf_r+0x46>
 800369e:	4343      	muls	r3, r0
 80036a0:	0035      	movs	r5, r6
 80036a2:	2101      	movs	r1, #1
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	e7a6      	b.n	80035f6 <_svfiprintf_r+0xd2>
 80036a8:	2301      	movs	r3, #1
 80036aa:	425b      	negs	r3, r3
 80036ac:	e7d0      	b.n	8003650 <_svfiprintf_r+0x12c>
 80036ae:	2300      	movs	r3, #0
 80036b0:	200a      	movs	r0, #10
 80036b2:	001a      	movs	r2, r3
 80036b4:	3501      	adds	r5, #1
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	7829      	ldrb	r1, [r5, #0]
 80036ba:	1c6e      	adds	r6, r5, #1
 80036bc:	3930      	subs	r1, #48	; 0x30
 80036be:	2909      	cmp	r1, #9
 80036c0:	d903      	bls.n	80036ca <_svfiprintf_r+0x1a6>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0c5      	beq.n	8003652 <_svfiprintf_r+0x12e>
 80036c6:	9209      	str	r2, [sp, #36]	; 0x24
 80036c8:	e7c3      	b.n	8003652 <_svfiprintf_r+0x12e>
 80036ca:	4342      	muls	r2, r0
 80036cc:	0035      	movs	r5, r6
 80036ce:	2301      	movs	r3, #1
 80036d0:	1852      	adds	r2, r2, r1
 80036d2:	e7f1      	b.n	80036b8 <_svfiprintf_r+0x194>
 80036d4:	ab07      	add	r3, sp, #28
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	003a      	movs	r2, r7
 80036da:	0021      	movs	r1, r4
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <_svfiprintf_r+0x1fc>)
 80036de:	9803      	ldr	r0, [sp, #12]
 80036e0:	e000      	b.n	80036e4 <_svfiprintf_r+0x1c0>
 80036e2:	bf00      	nop
 80036e4:	9004      	str	r0, [sp, #16]
 80036e6:	9b04      	ldr	r3, [sp, #16]
 80036e8:	3301      	adds	r3, #1
 80036ea:	d1d3      	bne.n	8003694 <_svfiprintf_r+0x170>
 80036ec:	89bb      	ldrh	r3, [r7, #12]
 80036ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80036f0:	065b      	lsls	r3, r3, #25
 80036f2:	d400      	bmi.n	80036f6 <_svfiprintf_r+0x1d2>
 80036f4:	e72d      	b.n	8003552 <_svfiprintf_r+0x2e>
 80036f6:	2001      	movs	r0, #1
 80036f8:	4240      	negs	r0, r0
 80036fa:	e72a      	b.n	8003552 <_svfiprintf_r+0x2e>
 80036fc:	ab07      	add	r3, sp, #28
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	003a      	movs	r2, r7
 8003702:	0021      	movs	r1, r4
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <_svfiprintf_r+0x1fc>)
 8003706:	9803      	ldr	r0, [sp, #12]
 8003708:	f000 f87c 	bl	8003804 <_printf_i>
 800370c:	e7ea      	b.n	80036e4 <_svfiprintf_r+0x1c0>
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	08003ba8 	.word	0x08003ba8
 8003714:	08003bae 	.word	0x08003bae
 8003718:	08003bb2 	.word	0x08003bb2
 800371c:	00000000 	.word	0x00000000
 8003720:	08003461 	.word	0x08003461

08003724 <_printf_common>:
 8003724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003726:	0015      	movs	r5, r2
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	688a      	ldr	r2, [r1, #8]
 800372c:	690b      	ldr	r3, [r1, #16]
 800372e:	000c      	movs	r4, r1
 8003730:	9000      	str	r0, [sp, #0]
 8003732:	4293      	cmp	r3, r2
 8003734:	da00      	bge.n	8003738 <_printf_common+0x14>
 8003736:	0013      	movs	r3, r2
 8003738:	0022      	movs	r2, r4
 800373a:	602b      	str	r3, [r5, #0]
 800373c:	3243      	adds	r2, #67	; 0x43
 800373e:	7812      	ldrb	r2, [r2, #0]
 8003740:	2a00      	cmp	r2, #0
 8003742:	d001      	beq.n	8003748 <_printf_common+0x24>
 8003744:	3301      	adds	r3, #1
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	069b      	lsls	r3, r3, #26
 800374c:	d502      	bpl.n	8003754 <_printf_common+0x30>
 800374e:	682b      	ldr	r3, [r5, #0]
 8003750:	3302      	adds	r3, #2
 8003752:	602b      	str	r3, [r5, #0]
 8003754:	6822      	ldr	r2, [r4, #0]
 8003756:	2306      	movs	r3, #6
 8003758:	0017      	movs	r7, r2
 800375a:	401f      	ands	r7, r3
 800375c:	421a      	tst	r2, r3
 800375e:	d027      	beq.n	80037b0 <_printf_common+0x8c>
 8003760:	0023      	movs	r3, r4
 8003762:	3343      	adds	r3, #67	; 0x43
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	1e5a      	subs	r2, r3, #1
 8003768:	4193      	sbcs	r3, r2
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	0692      	lsls	r2, r2, #26
 800376e:	d430      	bmi.n	80037d2 <_printf_common+0xae>
 8003770:	0022      	movs	r2, r4
 8003772:	9901      	ldr	r1, [sp, #4]
 8003774:	9800      	ldr	r0, [sp, #0]
 8003776:	9e08      	ldr	r6, [sp, #32]
 8003778:	3243      	adds	r2, #67	; 0x43
 800377a:	47b0      	blx	r6
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d025      	beq.n	80037cc <_printf_common+0xa8>
 8003780:	2306      	movs	r3, #6
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	682a      	ldr	r2, [r5, #0]
 8003786:	68e1      	ldr	r1, [r4, #12]
 8003788:	2500      	movs	r5, #0
 800378a:	4003      	ands	r3, r0
 800378c:	2b04      	cmp	r3, #4
 800378e:	d103      	bne.n	8003798 <_printf_common+0x74>
 8003790:	1a8d      	subs	r5, r1, r2
 8003792:	43eb      	mvns	r3, r5
 8003794:	17db      	asrs	r3, r3, #31
 8003796:	401d      	ands	r5, r3
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6922      	ldr	r2, [r4, #16]
 800379c:	4293      	cmp	r3, r2
 800379e:	dd01      	ble.n	80037a4 <_printf_common+0x80>
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	18ed      	adds	r5, r5, r3
 80037a4:	2700      	movs	r7, #0
 80037a6:	42bd      	cmp	r5, r7
 80037a8:	d120      	bne.n	80037ec <_printf_common+0xc8>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e010      	b.n	80037d0 <_printf_common+0xac>
 80037ae:	3701      	adds	r7, #1
 80037b0:	68e3      	ldr	r3, [r4, #12]
 80037b2:	682a      	ldr	r2, [r5, #0]
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	42bb      	cmp	r3, r7
 80037b8:	ddd2      	ble.n	8003760 <_printf_common+0x3c>
 80037ba:	0022      	movs	r2, r4
 80037bc:	2301      	movs	r3, #1
 80037be:	9901      	ldr	r1, [sp, #4]
 80037c0:	9800      	ldr	r0, [sp, #0]
 80037c2:	9e08      	ldr	r6, [sp, #32]
 80037c4:	3219      	adds	r2, #25
 80037c6:	47b0      	blx	r6
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d1f0      	bne.n	80037ae <_printf_common+0x8a>
 80037cc:	2001      	movs	r0, #1
 80037ce:	4240      	negs	r0, r0
 80037d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037d2:	2030      	movs	r0, #48	; 0x30
 80037d4:	18e1      	adds	r1, r4, r3
 80037d6:	3143      	adds	r1, #67	; 0x43
 80037d8:	7008      	strb	r0, [r1, #0]
 80037da:	0021      	movs	r1, r4
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	3145      	adds	r1, #69	; 0x45
 80037e0:	7809      	ldrb	r1, [r1, #0]
 80037e2:	18a2      	adds	r2, r4, r2
 80037e4:	3243      	adds	r2, #67	; 0x43
 80037e6:	3302      	adds	r3, #2
 80037e8:	7011      	strb	r1, [r2, #0]
 80037ea:	e7c1      	b.n	8003770 <_printf_common+0x4c>
 80037ec:	0022      	movs	r2, r4
 80037ee:	2301      	movs	r3, #1
 80037f0:	9901      	ldr	r1, [sp, #4]
 80037f2:	9800      	ldr	r0, [sp, #0]
 80037f4:	9e08      	ldr	r6, [sp, #32]
 80037f6:	321a      	adds	r2, #26
 80037f8:	47b0      	blx	r6
 80037fa:	1c43      	adds	r3, r0, #1
 80037fc:	d0e6      	beq.n	80037cc <_printf_common+0xa8>
 80037fe:	3701      	adds	r7, #1
 8003800:	e7d1      	b.n	80037a6 <_printf_common+0x82>
	...

08003804 <_printf_i>:
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	b08b      	sub	sp, #44	; 0x2c
 8003808:	9206      	str	r2, [sp, #24]
 800380a:	000a      	movs	r2, r1
 800380c:	3243      	adds	r2, #67	; 0x43
 800380e:	9307      	str	r3, [sp, #28]
 8003810:	9005      	str	r0, [sp, #20]
 8003812:	9204      	str	r2, [sp, #16]
 8003814:	7e0a      	ldrb	r2, [r1, #24]
 8003816:	000c      	movs	r4, r1
 8003818:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800381a:	2a78      	cmp	r2, #120	; 0x78
 800381c:	d807      	bhi.n	800382e <_printf_i+0x2a>
 800381e:	2a62      	cmp	r2, #98	; 0x62
 8003820:	d809      	bhi.n	8003836 <_printf_i+0x32>
 8003822:	2a00      	cmp	r2, #0
 8003824:	d100      	bne.n	8003828 <_printf_i+0x24>
 8003826:	e0c1      	b.n	80039ac <_printf_i+0x1a8>
 8003828:	2a58      	cmp	r2, #88	; 0x58
 800382a:	d100      	bne.n	800382e <_printf_i+0x2a>
 800382c:	e08c      	b.n	8003948 <_printf_i+0x144>
 800382e:	0026      	movs	r6, r4
 8003830:	3642      	adds	r6, #66	; 0x42
 8003832:	7032      	strb	r2, [r6, #0]
 8003834:	e022      	b.n	800387c <_printf_i+0x78>
 8003836:	0010      	movs	r0, r2
 8003838:	3863      	subs	r0, #99	; 0x63
 800383a:	2815      	cmp	r0, #21
 800383c:	d8f7      	bhi.n	800382e <_printf_i+0x2a>
 800383e:	f7fc fc6b 	bl	8000118 <__gnu_thumb1_case_shi>
 8003842:	0016      	.short	0x0016
 8003844:	fff6001f 	.word	0xfff6001f
 8003848:	fff6fff6 	.word	0xfff6fff6
 800384c:	001ffff6 	.word	0x001ffff6
 8003850:	fff6fff6 	.word	0xfff6fff6
 8003854:	fff6fff6 	.word	0xfff6fff6
 8003858:	003600a8 	.word	0x003600a8
 800385c:	fff6009a 	.word	0xfff6009a
 8003860:	00b9fff6 	.word	0x00b9fff6
 8003864:	0036fff6 	.word	0x0036fff6
 8003868:	fff6fff6 	.word	0xfff6fff6
 800386c:	009e      	.short	0x009e
 800386e:	0026      	movs	r6, r4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	3642      	adds	r6, #66	; 0x42
 8003874:	1d11      	adds	r1, r2, #4
 8003876:	6019      	str	r1, [r3, #0]
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	7033      	strb	r3, [r6, #0]
 800387c:	2301      	movs	r3, #1
 800387e:	e0a7      	b.n	80039d0 <_printf_i+0x1cc>
 8003880:	6808      	ldr	r0, [r1, #0]
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	1d0a      	adds	r2, r1, #4
 8003886:	0605      	lsls	r5, r0, #24
 8003888:	d50b      	bpl.n	80038a2 <_printf_i+0x9e>
 800388a:	680d      	ldr	r5, [r1, #0]
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	2d00      	cmp	r5, #0
 8003890:	da03      	bge.n	800389a <_printf_i+0x96>
 8003892:	232d      	movs	r3, #45	; 0x2d
 8003894:	9a04      	ldr	r2, [sp, #16]
 8003896:	426d      	negs	r5, r5
 8003898:	7013      	strb	r3, [r2, #0]
 800389a:	4b61      	ldr	r3, [pc, #388]	; (8003a20 <_printf_i+0x21c>)
 800389c:	270a      	movs	r7, #10
 800389e:	9303      	str	r3, [sp, #12]
 80038a0:	e01b      	b.n	80038da <_printf_i+0xd6>
 80038a2:	680d      	ldr	r5, [r1, #0]
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	0641      	lsls	r1, r0, #25
 80038a8:	d5f1      	bpl.n	800388e <_printf_i+0x8a>
 80038aa:	b22d      	sxth	r5, r5
 80038ac:	e7ef      	b.n	800388e <_printf_i+0x8a>
 80038ae:	680d      	ldr	r5, [r1, #0]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	1d08      	adds	r0, r1, #4
 80038b4:	6018      	str	r0, [r3, #0]
 80038b6:	062e      	lsls	r6, r5, #24
 80038b8:	d501      	bpl.n	80038be <_printf_i+0xba>
 80038ba:	680d      	ldr	r5, [r1, #0]
 80038bc:	e003      	b.n	80038c6 <_printf_i+0xc2>
 80038be:	066d      	lsls	r5, r5, #25
 80038c0:	d5fb      	bpl.n	80038ba <_printf_i+0xb6>
 80038c2:	680d      	ldr	r5, [r1, #0]
 80038c4:	b2ad      	uxth	r5, r5
 80038c6:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <_printf_i+0x21c>)
 80038c8:	2708      	movs	r7, #8
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	2a6f      	cmp	r2, #111	; 0x6f
 80038ce:	d000      	beq.n	80038d2 <_printf_i+0xce>
 80038d0:	3702      	adds	r7, #2
 80038d2:	0023      	movs	r3, r4
 80038d4:	2200      	movs	r2, #0
 80038d6:	3343      	adds	r3, #67	; 0x43
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	6863      	ldr	r3, [r4, #4]
 80038dc:	60a3      	str	r3, [r4, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db03      	blt.n	80038ea <_printf_i+0xe6>
 80038e2:	2204      	movs	r2, #4
 80038e4:	6821      	ldr	r1, [r4, #0]
 80038e6:	4391      	bics	r1, r2
 80038e8:	6021      	str	r1, [r4, #0]
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	d102      	bne.n	80038f4 <_printf_i+0xf0>
 80038ee:	9e04      	ldr	r6, [sp, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <_printf_i+0x10a>
 80038f4:	9e04      	ldr	r6, [sp, #16]
 80038f6:	0028      	movs	r0, r5
 80038f8:	0039      	movs	r1, r7
 80038fa:	f7fc fc9d 	bl	8000238 <__aeabi_uidivmod>
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	3e01      	subs	r6, #1
 8003902:	5c5b      	ldrb	r3, [r3, r1]
 8003904:	7033      	strb	r3, [r6, #0]
 8003906:	002b      	movs	r3, r5
 8003908:	0005      	movs	r5, r0
 800390a:	429f      	cmp	r7, r3
 800390c:	d9f3      	bls.n	80038f6 <_printf_i+0xf2>
 800390e:	2f08      	cmp	r7, #8
 8003910:	d109      	bne.n	8003926 <_printf_i+0x122>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	07db      	lsls	r3, r3, #31
 8003916:	d506      	bpl.n	8003926 <_printf_i+0x122>
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	6922      	ldr	r2, [r4, #16]
 800391c:	4293      	cmp	r3, r2
 800391e:	dc02      	bgt.n	8003926 <_printf_i+0x122>
 8003920:	2330      	movs	r3, #48	; 0x30
 8003922:	3e01      	subs	r6, #1
 8003924:	7033      	strb	r3, [r6, #0]
 8003926:	9b04      	ldr	r3, [sp, #16]
 8003928:	1b9b      	subs	r3, r3, r6
 800392a:	6123      	str	r3, [r4, #16]
 800392c:	9b07      	ldr	r3, [sp, #28]
 800392e:	0021      	movs	r1, r4
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	9805      	ldr	r0, [sp, #20]
 8003934:	9b06      	ldr	r3, [sp, #24]
 8003936:	aa09      	add	r2, sp, #36	; 0x24
 8003938:	f7ff fef4 	bl	8003724 <_printf_common>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d14c      	bne.n	80039da <_printf_i+0x1d6>
 8003940:	2001      	movs	r0, #1
 8003942:	4240      	negs	r0, r0
 8003944:	b00b      	add	sp, #44	; 0x2c
 8003946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003948:	3145      	adds	r1, #69	; 0x45
 800394a:	700a      	strb	r2, [r1, #0]
 800394c:	4a34      	ldr	r2, [pc, #208]	; (8003a20 <_printf_i+0x21c>)
 800394e:	9203      	str	r2, [sp, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	6821      	ldr	r1, [r4, #0]
 8003954:	ca20      	ldmia	r2!, {r5}
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	0608      	lsls	r0, r1, #24
 800395a:	d516      	bpl.n	800398a <_printf_i+0x186>
 800395c:	07cb      	lsls	r3, r1, #31
 800395e:	d502      	bpl.n	8003966 <_printf_i+0x162>
 8003960:	2320      	movs	r3, #32
 8003962:	4319      	orrs	r1, r3
 8003964:	6021      	str	r1, [r4, #0]
 8003966:	2710      	movs	r7, #16
 8003968:	2d00      	cmp	r5, #0
 800396a:	d1b2      	bne.n	80038d2 <_printf_i+0xce>
 800396c:	2320      	movs	r3, #32
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	439a      	bics	r2, r3
 8003972:	6022      	str	r2, [r4, #0]
 8003974:	e7ad      	b.n	80038d2 <_printf_i+0xce>
 8003976:	2220      	movs	r2, #32
 8003978:	6809      	ldr	r1, [r1, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	6022      	str	r2, [r4, #0]
 800397e:	0022      	movs	r2, r4
 8003980:	2178      	movs	r1, #120	; 0x78
 8003982:	3245      	adds	r2, #69	; 0x45
 8003984:	7011      	strb	r1, [r2, #0]
 8003986:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <_printf_i+0x220>)
 8003988:	e7e1      	b.n	800394e <_printf_i+0x14a>
 800398a:	0648      	lsls	r0, r1, #25
 800398c:	d5e6      	bpl.n	800395c <_printf_i+0x158>
 800398e:	b2ad      	uxth	r5, r5
 8003990:	e7e4      	b.n	800395c <_printf_i+0x158>
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	680d      	ldr	r5, [r1, #0]
 8003996:	1d10      	adds	r0, r2, #4
 8003998:	6949      	ldr	r1, [r1, #20]
 800399a:	6018      	str	r0, [r3, #0]
 800399c:	6813      	ldr	r3, [r2, #0]
 800399e:	062e      	lsls	r6, r5, #24
 80039a0:	d501      	bpl.n	80039a6 <_printf_i+0x1a2>
 80039a2:	6019      	str	r1, [r3, #0]
 80039a4:	e002      	b.n	80039ac <_printf_i+0x1a8>
 80039a6:	066d      	lsls	r5, r5, #25
 80039a8:	d5fb      	bpl.n	80039a2 <_printf_i+0x19e>
 80039aa:	8019      	strh	r1, [r3, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	9e04      	ldr	r6, [sp, #16]
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	e7bb      	b.n	800392c <_printf_i+0x128>
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	1d11      	adds	r1, r2, #4
 80039b8:	6019      	str	r1, [r3, #0]
 80039ba:	6816      	ldr	r6, [r2, #0]
 80039bc:	2100      	movs	r1, #0
 80039be:	0030      	movs	r0, r6
 80039c0:	6862      	ldr	r2, [r4, #4]
 80039c2:	f000 f833 	bl	8003a2c <memchr>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d001      	beq.n	80039ce <_printf_i+0x1ca>
 80039ca:	1b80      	subs	r0, r0, r6
 80039cc:	6060      	str	r0, [r4, #4]
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	6123      	str	r3, [r4, #16]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9a04      	ldr	r2, [sp, #16]
 80039d6:	7013      	strb	r3, [r2, #0]
 80039d8:	e7a8      	b.n	800392c <_printf_i+0x128>
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	0032      	movs	r2, r6
 80039de:	9906      	ldr	r1, [sp, #24]
 80039e0:	9805      	ldr	r0, [sp, #20]
 80039e2:	9d07      	ldr	r5, [sp, #28]
 80039e4:	47a8      	blx	r5
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	d0aa      	beq.n	8003940 <_printf_i+0x13c>
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	079b      	lsls	r3, r3, #30
 80039ee:	d415      	bmi.n	8003a1c <_printf_i+0x218>
 80039f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f2:	68e0      	ldr	r0, [r4, #12]
 80039f4:	4298      	cmp	r0, r3
 80039f6:	daa5      	bge.n	8003944 <_printf_i+0x140>
 80039f8:	0018      	movs	r0, r3
 80039fa:	e7a3      	b.n	8003944 <_printf_i+0x140>
 80039fc:	0022      	movs	r2, r4
 80039fe:	2301      	movs	r3, #1
 8003a00:	9906      	ldr	r1, [sp, #24]
 8003a02:	9805      	ldr	r0, [sp, #20]
 8003a04:	9e07      	ldr	r6, [sp, #28]
 8003a06:	3219      	adds	r2, #25
 8003a08:	47b0      	blx	r6
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	d098      	beq.n	8003940 <_printf_i+0x13c>
 8003a0e:	3501      	adds	r5, #1
 8003a10:	68e3      	ldr	r3, [r4, #12]
 8003a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	42ab      	cmp	r3, r5
 8003a18:	dcf0      	bgt.n	80039fc <_printf_i+0x1f8>
 8003a1a:	e7e9      	b.n	80039f0 <_printf_i+0x1ec>
 8003a1c:	2500      	movs	r5, #0
 8003a1e:	e7f7      	b.n	8003a10 <_printf_i+0x20c>
 8003a20:	08003bb9 	.word	0x08003bb9
 8003a24:	08003bca 	.word	0x08003bca

08003a28 <__retarget_lock_acquire_recursive>:
 8003a28:	4770      	bx	lr

08003a2a <__retarget_lock_release_recursive>:
 8003a2a:	4770      	bx	lr

08003a2c <memchr>:
 8003a2c:	b2c9      	uxtb	r1, r1
 8003a2e:	1882      	adds	r2, r0, r2
 8003a30:	4290      	cmp	r0, r2
 8003a32:	d101      	bne.n	8003a38 <memchr+0xc>
 8003a34:	2000      	movs	r0, #0
 8003a36:	4770      	bx	lr
 8003a38:	7803      	ldrb	r3, [r0, #0]
 8003a3a:	428b      	cmp	r3, r1
 8003a3c:	d0fb      	beq.n	8003a36 <memchr+0xa>
 8003a3e:	3001      	adds	r0, #1
 8003a40:	e7f6      	b.n	8003a30 <memchr+0x4>

08003a42 <memcpy>:
 8003a42:	2300      	movs	r3, #0
 8003a44:	b510      	push	{r4, lr}
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d100      	bne.n	8003a4c <memcpy+0xa>
 8003a4a:	bd10      	pop	{r4, pc}
 8003a4c:	5ccc      	ldrb	r4, [r1, r3]
 8003a4e:	54c4      	strb	r4, [r0, r3]
 8003a50:	3301      	adds	r3, #1
 8003a52:	e7f8      	b.n	8003a46 <memcpy+0x4>

08003a54 <memmove>:
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4288      	cmp	r0, r1
 8003a58:	d902      	bls.n	8003a60 <memmove+0xc>
 8003a5a:	188b      	adds	r3, r1, r2
 8003a5c:	4298      	cmp	r0, r3
 8003a5e:	d303      	bcc.n	8003a68 <memmove+0x14>
 8003a60:	2300      	movs	r3, #0
 8003a62:	e007      	b.n	8003a74 <memmove+0x20>
 8003a64:	5c8b      	ldrb	r3, [r1, r2]
 8003a66:	5483      	strb	r3, [r0, r2]
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	d2fb      	bcs.n	8003a64 <memmove+0x10>
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	5ccc      	ldrb	r4, [r1, r3]
 8003a70:	54c4      	strb	r4, [r0, r3]
 8003a72:	3301      	adds	r3, #1
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1fa      	bne.n	8003a6e <memmove+0x1a>
 8003a78:	e7f8      	b.n	8003a6c <memmove+0x18>

08003a7a <_realloc_r>:
 8003a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a7c:	0007      	movs	r7, r0
 8003a7e:	000e      	movs	r6, r1
 8003a80:	0014      	movs	r4, r2
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d105      	bne.n	8003a92 <_realloc_r+0x18>
 8003a86:	0011      	movs	r1, r2
 8003a88:	f7ff fc12 	bl	80032b0 <_malloc_r>
 8003a8c:	0005      	movs	r5, r0
 8003a8e:	0028      	movs	r0, r5
 8003a90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a92:	2a00      	cmp	r2, #0
 8003a94:	d103      	bne.n	8003a9e <_realloc_r+0x24>
 8003a96:	f7ff fb9f 	bl	80031d8 <_free_r>
 8003a9a:	0025      	movs	r5, r4
 8003a9c:	e7f7      	b.n	8003a8e <_realloc_r+0x14>
 8003a9e:	f000 f81b 	bl	8003ad8 <_malloc_usable_size_r>
 8003aa2:	9001      	str	r0, [sp, #4]
 8003aa4:	4284      	cmp	r4, r0
 8003aa6:	d803      	bhi.n	8003ab0 <_realloc_r+0x36>
 8003aa8:	0035      	movs	r5, r6
 8003aaa:	0843      	lsrs	r3, r0, #1
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	d3ee      	bcc.n	8003a8e <_realloc_r+0x14>
 8003ab0:	0021      	movs	r1, r4
 8003ab2:	0038      	movs	r0, r7
 8003ab4:	f7ff fbfc 	bl	80032b0 <_malloc_r>
 8003ab8:	1e05      	subs	r5, r0, #0
 8003aba:	d0e8      	beq.n	8003a8e <_realloc_r+0x14>
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	0022      	movs	r2, r4
 8003ac0:	429c      	cmp	r4, r3
 8003ac2:	d900      	bls.n	8003ac6 <_realloc_r+0x4c>
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	0031      	movs	r1, r6
 8003ac8:	0028      	movs	r0, r5
 8003aca:	f7ff ffba 	bl	8003a42 <memcpy>
 8003ace:	0031      	movs	r1, r6
 8003ad0:	0038      	movs	r0, r7
 8003ad2:	f7ff fb81 	bl	80031d8 <_free_r>
 8003ad6:	e7da      	b.n	8003a8e <_realloc_r+0x14>

08003ad8 <_malloc_usable_size_r>:
 8003ad8:	1f0b      	subs	r3, r1, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1f18      	subs	r0, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da01      	bge.n	8003ae6 <_malloc_usable_size_r+0xe>
 8003ae2:	580b      	ldr	r3, [r1, r0]
 8003ae4:	18c0      	adds	r0, r0, r3
 8003ae6:	4770      	bx	lr

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr
